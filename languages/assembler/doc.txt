Программы на ассемблере могут обращаться к операционной системе непосредственно, без использования
библиотеки системных вызовов. Используется для прямого обращения к процессору. Ассемблеры бывают
разные (под разные архитектуры), nasm, gas, masm и т.д. nasm это более менее современный.

В ассемблере секции — это разделы в объектном файле или исполняемом файле, которые содержат
определённые типы данных или инструкции. Каждая секция служит определённой цели и имеет свои
атрибуты, которые сообщают системе, как использовать содержимое секции во время выполнения
программы.

Например: .text / .data / .bss / .rodata (read-only константы) / .heap / .stack

В исходном коде на ассемблере можно управлять содержимым этих секций, помещая данные и инструкции в
соответствующие разделы с помощью директив ассемблера (например, `section .text` для начала секции
кода).

Например, в Си коде можно увидеть ассемблерную вставку:
static void vmxoff(void *unused)
{
    __asm__ __volatile__("vmxoff");
}

Ключевое слово `__asm__` — это способ включения встроенного ассемблерного кода (inline assembly)
непосредственно в исходный код на языке C.

__asm__ vs asm ?
__asm__ более переносимый (между разными компиляторами)

volatile используется в userspace, __volatile__ используется в более низкоуровневых программах (ядро),
это идентично обычному volatile.

Вот еще пример, из foo получается 20:
int foo = 10;
__asm__
(
"movl %1, %%eax; addl %%eax, %%eax; movl %%eax, %0;"
: "=r" (foo)
: "r" (foo)
: "%eax"
);
