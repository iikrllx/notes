Темы:
* Единицы информации
* Основы
* Логические выражения
* Смещение
* Маска / Флаг
* Система счисления
* Перевод из двоичной в десятичную
* Время
* Типы данных
* Операции
* Магическое число
* Шестнадцатеричные числа
* Возведение в степень


--- Единицы информации
1 бит - кол-во информации, передается с помощью одного
знака 0/1 в двоичном коде. 1 - true, 0 - false

1 байт  = 2(3)степени  - 8 бит (равен одному байту)
1 кбайт = 2(10)степени - 1024 байт (равен 1 кб)
1 мбайт - 2(10)степени - 1024 кбайт (равен 1 мб) / 2(20)байт -> 1,000,000 байт
1 гбайт - 2(10)степени - 1024 мбайт (равен 1 гб) / 2(30)байт -> 1,000,000,000 байт

$ ls -l /etc/usb_modeswitch.setup # выдал 78853 байт
Чтобы из 78853 получить КБ, надо 78853 / 1024 = 80КБ


--- Основы
1 байт - это 8 логических значений (true или false)

8 бит = 1 байт
01101001 = ячейка из 8 разрядов
76543210 = разряды (справа налево)
Каждая цифра это разряд.

Старший бит, это последний, если он является 1, то число
скорее отрицательное, чем положительное, а младший бит, это
0 или 1, в первом разряде

Один байт содержит 256 возможных значений (от 0 до 255 ВКЛЮЧИТЕЛЬНО)
128 + 64 + 32 + 16 + 8 + 4 + 2 + 1 (два в 8 степени)
Например, 255 = 11111111
То есть, в одном байте значений может быть:
от 00000000 до 11111111 в двоичной системе
или это означает от 0 до 255 в десятичной системе

И это не означает, что в 1 байте можно хранить 256 чисел - нет!
Число одно, а значений у него 255

Например число:
        0 0000011 положительное
а число 1 0000011 отрицательное


--- Логические выражения
Логическое И: (& - умножение)
0 & 0 = 0
1 & 0 = 0
0 & 1 = 0
1 & 1 = 1

Логическое ИЛИ: (| - сложение)
0 | 0 = 0
1 | 0 = 1
0 | 1 = 1
1 | 1 = 1

Исключающее ИЛИ: (^ - сложение, но 1 ^ 1 будет 0)
0 ^ 0 = 0
1 ^ 0 = 1
0 ^ 1 = 1
1 ^ 1 = 0 (Отличается только этот пункт от стандартного ИЛИ)

Инверсия: (~)
0 ~ 1 Положительное число в отрицательное
1 ~ 0 Отрицательное число в положительное

Таблица соответствия цифр восьмеричной системы счисления числам
двоичной системы:
0 - 000
1 - 001
2 - 010
3 - 011
4 - 100
5 - 101
6 - 110
7 - 111
8 - 1000
16 - 10000
32 - 00100000
64 - 01000000
128 - 10000000
256 - 1000000000


--- Смещение
Как из числа 3 сделать 0? (3 >> 2)

Операции побитового сдвига
>> сдвигает биты числа вправо, дописывая слева нули
<< сдвигает биты числа влево, дописывая справа нули
Вышедшие за пределы биты отбрасываются
00000101 << 2 == 00010100
00000101 >> 2 == 00000001

Умножение / деление числа с помощью сдвига
2 << 1 // умножение, станет 4
4 >> 1 // деление, станет 2


--- Маска / Флаг
Маска - это двоичное число, которое указывает на интересующие биты.

Флаг - побитовое значение, например флаг O_RDWR равен 0x00000002
его можно складывать с такими же флагами и получать нужную сумму бит.
Проверка значения флага: `if (val == 0b0000011) { Флаг найден! };`


--- Система счисления
Это способ наименования и обозначения чисел.
- двоичная - 0,1 (the base of decimal number system in 2)
  пример: int val = 0b11110000

- восьмеричная - 0,1,2,3,4,5,6,7 (the base of decimal number system is 8)
  пример: int val = 0360

- десятичная - 0,1,2,3,4,5,6,7,8,9 (the base of decimal number system is 10)
  пример: int val = 240

- шестнадцатиричная - 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F
  пример: int val = 0xF0

The base of hexadecimal number system is 16
A is 10, B is 11, C is 12, D is 13, E is 14 and F is 15


--- Перевод из двоичной в десятичную
011 перевезти в десятичную
0*2(2) + 1*2(1) + 1*2(0) = 1 + 2 + 0 = 3

0x40 перевезти в десятичную 040
0*16(2) + 4*16(1) + 0*16(0) = 0 + 64 + 0 = 64


--- Время
секунда - 1000 миллисекунд
минута  - 60 секунд
час     - 60 минут
день    - 24 часа
неделя  - 168 часов
месяц   - 720 часов (примерно)
год     - 8760 часов


--- Типы данных
С точки зрения размерности процессор аппаратно поддерживает
следующие типы данных: байт, слово, страница.

Байт - восемь последовательно расположенных битов, от 0 до 7 это наименьшая адресуемая ячейка
памяти.

Машинное слово может быть равно 8, 16, 32 бита

Обычно на практике используются целые, вещественные числа и символы, из этих простых типов данных
строятся структурированные типы: массивы, множества, строки и другие.

Для представления числа в памяти отводится необходимое кол-во байт, например, с помощью 8 разрядов
одного байта можно представить 2(8) = 256 целых беззнаковых чисел, числа в диапозоне от 0 до 255.
С помощью слова (16 бит) можно представить как 2(16) = 65536, целых беззнаковых чисел.

Символьные данные также хранятся в памяти в двоичном виде. Каждому символу ставится в соответствие
двоичный код, который и записывается в качестве значения символа.


--- Операции
Установка бита, означает поставить 1 в n позиции,
например установить бит в 3 позиции числа 3
int mask = 0x04; int x = 3; x |= mask // 7

Очистка бита, означает поставить 0 в n позиции,
например очистить бит в 1 позиции числа 3
int mask = 0x02; int x = 3; x &= ~(mask) // 1

Переключить бит, означает что нужно переключить бит на противоположный
в нужной позиции `(x ^= (1 << pos));`

Проверка, что флаг найден:
if (flags & x)

Вывод битов в двоичном представлении, нужно определиться
с какой позиции выводить биты, лучше конечно же начинать с 7 позиции:
for (int i = CHAR_BIT - 1; i >= 0; i--) { (x & (1 << i)) != 0) }

Подсчет битов, здесь тот же принцип, что и выше, только нужно
иметь две переменные каунтера, чтобы инкрементировать их по условию,
тогда мы получим суммарное кол-во 0 и 1,
пример: `(rval == 0) ? bc_0++ : bc_1++;`


--- Магическое число
Целочисленная или текстовая константа, используемая для однозначной идентификации ресурса или
данных. Такое число само по себе не несёт никакого смысла и может вызвать недоумение, встретившись
в коде программы без соответствующего контекста или комментария, при этом попытка изменить его на
другое, даже близкое по значению, может привести к абсолютно непредсказуемым последствиям. По этой
причине подобные числа были иронично названы магическими. Это число может использоваться в различных
частях программы, таких как операции, условные выражения, циклы и т. д.

Не все числа требуется переносить в константы. Смысл чисел 0 и 1 понятен, и дальнейшего объяснения
не требуется.


--- Шестнадцатеричные числа
Широко используется в низкоуровневом программировании и компьютерной документации, поскольку в
современных компьютерах минимальной адресуемой единицей памяти является 8-битный байт, значения
которого удобно записывать двумя шестнадцатеричными цифрами. Например, число 255 удобно записать как
0xFF, писать 0b00000010 неудобно :)


--- Возведение в степень
2(6) - это означает, что мы 2 умножаем на 2 (6 раз)
2*2*2*2*2*2 = 64, должно быть 6 цифр числа 2

2(2), 2 * 2 (один раз) = 4

Коротко:
2(0) = 1
2(1) = 2
2(2) = 4
2(3) = 8
2(4) = 16
2(5) = 32
2(6) = 64
2(7) = 128
2(8) = 256
2(9) = 512
2(10) = 1024
