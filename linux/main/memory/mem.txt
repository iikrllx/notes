Темы:
* Физическая память (компоненты)
* Виртуальная память (компоненты)
* Разделяемая память
* Общее
* Память
* Ошибка сегментации
* Ячейки памяти
* Адресное пространство (стек / куча)
* Виртуальная память
* Преимущества виртуальной памяти
* Страницы памяти и страничные кадры
* Размер стека
* Размер кучи
* Еще немного про MMU
* Размеры
* Core dump - дамп памяти
* I/O devices
* DMA
* IOMMU


--- Физическая память (компоненты)
Вот некоторые компоненты, которые входят в управление памятью в ядре Linux:

1. Менеджер памяти (Memory Manager): Отвечает за управление памятью в системе,
включая выделение и освобождение памяти для процессов, управление страницами памяти и своппинг.

2. Страницы памяти (Memory Pages): Физическая память разделена на блоки фиксированного размера,
называемые страницами. Ядро управляет этими страницами, отслеживая их использование и перемещая
их между различными областями памяти (например, активными, неактивными, свободными).

Управление памятью с помощью страниц позволяет операционной системе эффективнее использовать
память, обеспечивать защиту памяти и использовать техники виртуализации памяти,
такие как подкачка (swapping) и разделяемая память.

3. Таблицы страниц (Page Tables): Используются для отображения виртуальных адресов памяти
на физические адреса. Каждый процесс имеет свою таблицу страниц, которая используется
при переводе виртуального адреса в физический.

4. Служба кэширования страниц (Page Cache): Часть памяти, используемая для кэширования
содержимого файлов. Это ускоряет доступ к файлам, сохраняя их данные в памяти.

5. Буферы (Buffers): Используются для кэширования данных, предназначенных для
блочных устройств, таких как жесткие диски.

6. Слэб аллокатор (Slab Allocator): Специализированный аллокатор памяти для
часто создаваемых и уничтожаемых структур данных в ядре, таких как объекты `task_struct`.

Слэб аллокатор используется процессами ядра, включая kworkers и kthreads,
для выделения памяти под структуры данных, необходимые им для выполнения своих задач.
Слэб аллокатор помогает этим процессам и потокам ядра эффективно управлять памятью,
выделяя и освобождая память для часто используемых структур данных,
что улучшает общую производительность системы.

7. Система свапа (Swap): Механизм, позволяющий использовать часть жесткого диска
как расширение физической памяти, перемещая на диск те страницы памяти,
которые редко используются.

Физическая память ядра обычно защищена от прямого доступа пользовательскими процессами,
так как ошибка в таком процессе может привести к сбою всей системы. Вместо этого,
пользовательские процессы работают с виртуальной памятью, и когда они нуждаются
в ресурсах ядра, они используют системные вызовы, которые являются контролируемым
способом взаимодействия с ядром.


--- Виртуальная память (компоненты)
.text, .data, .bss, .heap, .stack, разделяемая память.
Эти секции находятся в виртуальном адресном пространстве процесса и управляются страничным
механизмом операционной системы для отображения в физическую память.


--- Разделяемая память
Shared Memory - это механизм, который позволяет двум или более процессам обмениваться данными
путем доступа к одному и тому же участку физической памяти. Это один из методов межпроцессного
взаимодействия (Inter-Process Communication, IPC).

В операционных системах, таких как Unix и Linux, разделяемая память позволяет процессам более
эффективно обмениваться большими объемами данных, поскольку данные не нужно копировать между
процессами; вместо этого данные существуют в общем пространстве памяти, к которому все процессы
имеют доступ. Это также может увеличить производительность приложений, поскольку доступ к разделяемой
памяти обычно быстрее, чем использование других механизмов IPC, таких как каналы (pipes) или сокеты.


--- Общее
Следить за каждым байтом памяти в отдельности было бы накладно, поэтому ядро оперирует
достаточно большими блоками памяти - страницами, типовой размер которых составляет 4 килобайта.

Физическая память работает в пространстве ядра kernelspace.
Физическая - оперативная память машины (настоящая).
Вся физическая память разбита на страничные кадры.
Размер страничного кадра - платформозависимая величина, для x86 она обычно равна 4 Кб

В ядре нет механизма виртуальной памяти, подобного тому, который существует
в пользовательском пространстве, поскольку ядро управляет физической памятью напрямую.

Виртуальная память в userspace (виртуальная память - это абстракция).
Она может быть больше, чем реально физической памяти у вас есть (благодаря swap или страничной подкачке).
Это то, что создаёт операционная система для работы программ с ней.

Выделяемая память процессу может быть либо резидентная, либо виртуальная.
$ ps -a -o pid,user,rss,vsz,comm

 PID USER       RSS    VSZ COMMAND
1735 user      3744   8012 tmux: client
1747 user     27028  68172 vim
2295 user      4848  11216 ps

Эти цифры в килобайтах.

* VSZ
Показывает общий объем виртуальной памяти, выделенной для процесса.
Но не факт, что процесс успел в эту память что-то записать.

* RSS
Показывает фактическое использование физической памяти процессом.
Это память которую процесс занял, то есть что-то сохранил в виртуальную память.

Приложение может запросить много памяти, а использовать малую её часть.
Поэтому почти всегда rss меньше чем vsz.

Раздел подкачки (SWAP) — это раздел на жестком диске, куда помещаются:

* Редко используемые данные из резидентной памяти.

* Любые данные при нехватки физической памяти.

Linux умеет работать не только с разделом подкачки, но и с файлом подкачки.
То есть данные из резидентной памяти могут сбрасываться в специальный файл,
который лежит на жёстком диске.

Вся виртуальная память состоит из страниц. Страницы - это набор ячеек памяти
в виртуальном пространстве, которому сопоставлена реальная память на диске.
Страницы бывают обычные - 4 килобайта и huge page - блоки по 2 мегабайтам,
либо гигабайту. Используется, когда происходит работа с большими данными,
например базами данных (также структура таблицы страниц становится оптимальнее).

Страницы бывают грязные и чистые. Чистые - не подвергались изменению, грязные - подвергались.
Например, вы загрузили библиотеку - это чистая страница, т.к. никто ее не изменял и она может
быть спокойно забыта. А вот пример грязных: открываете текстовый файл в редакторе и вносите изменения.
Измененные данные сначала хранятся в оперативной памяти, и эти страницы памяти помечаются как "грязные",
так как они содержат данные, которые отличаются от тех, что записаны на диске. Когда система решит,
что пришло время сбросить данные на диск (например, при вызове системного вызова `sync` или в результате
работы фонового процесса `flush`), грязные страницы будут записаны на диск, и их статус изменится на "чистые".

Больше всего в системе память занимает страничный кэш (Page Cache). Вся работа с файлами на
диске (запись или чтение) идет через Page Cache. Запись в Linux всегда быстрее чтения, так как запись
вначале идет в Page Cache, а затем сбрасывается на диск. А при чтении ядро ищет файл в Page Cache,
и если не находит читает файл с диска. Узнать сколько сейчас система тратит памяти на Page Cache
можно выполнив команду $ free -h

$ free -h
Секция shared содержит память которая хранит загружаемые динамические библиотеки,
или данные которыми можно поделиться с другими процессами. Все процессы получают
доступ к этим данным. Разделяемые библиотеки: Когда несколько процессов используют
одну и ту же библиотеку, она загружается в память один раз, и этот объем памяти считается разделяемым.

Секция buff/cache -> Page Cache
Забит страничным кэшом.

Когда вы создаете новый файл в Linux и записываете в него данные, в первую очередь информация
попадает в кэш операционной системы (а страницы памяти для этого файла помечаются как грязные),
а не напрямую на диск. Это делается для увеличения производительности, поскольку работа с кэшем
памяти быстрее, чем с диском.

Страницы памяти, которые содержат измененные данные (то есть данные, которые ещё не были записаны на диск),
называются "грязными" страницами (dirty pages). Они помечаются таким образом,
чтобы система знала, что эту информацию нужно в какой-то момент сохранить на диск.

Linux периодически выполняет процедуру, называемую "flush" (сброс), во время которой эти грязные
страницы записываются на диск. Это может происходить по истечении определённого времени или когда
количество грязных страниц достигает определённого предела. Также сброс может быть инициирован
вручную при помощи команды `sync`.

Если система обнаруживает, что грязных страниц слишком много, она может принудительно сбросить их на диск,
чтобы избежать потери данных в случае сбоя системы и чтобы освободить память для других задач.
Это важно, потому что пока данные не сброшены на диск, они существуют только в памяти и могут
быть потеряны при выключении или перезагрузке компьютера.

Существует утилита — vmtouch, она может показать какой процент указанного файла находится в страничном кэше.
$ vmtouch /etc/passwd -> 100%

Таким образом, вся информация файла `/etc/passwd` находится в оперативной памяти и может быть доступна
для чтения без задержки на доступ к диску. Это ускоряет работу системы, так как чтение данных из оперативной
памяти гораздо быстрее, чем чтение с диска.

Если сделать $ cat /etc/passwd файл будет прочитан из памяти RAM, а не с диска.
Когда вы запрашиваете чтение файла, система сначала проверяет, есть ли данные файла в кэше,
и если они там есть, то она читает их оттуда, минуя необходимость обращения к диску.

Команда sync записывает грязные страницы на диск.

Все области памяти объеденены в двунаправленный список, где они упорядочены по возрастанию адресов.


--- Память
Оперативной памятью обладает вычислительный процесс и когда этот процесс
заканчивается, то память освобождается, для того чтобы она могла быть
использована для других процессов.

Память (RAM) под массив выделяется разом и обращение к элементу массива
происходит мгновенно (прямое обращение к памяти), не стоит забывать
про сдвиг элементов массива, так как начинается массив с нуля.
Если мы попытаемся обратиться к несуществующей ячейке памяти, то получим
ошибку seg fault, так как выход за границу массива (чужая память), происходит
защита памяти ОС, нельзя достучаться к сегментам памяти другого процесса.
Если мы попытаемся обратиться к отрицательному индексу A[-1], то С обратиться
к элементу до 0 (перед первым) - выход за границу массива.

Адрес памяти - это способ обратиться к содержимому ячейки памяти.

Память также предоставляется в форме автоматических и статических переменных,
но основа любой системы управления памятью - это выделение, использование и,
наконец, возврат динамической памяти. Динимаческая память возвращается во время
выполнения, а не во время компиляции, причем в размере, который может
быть неизвестен вплоть до момента выделения. Разработчик прибегает
к использованию динамической памяти, когда объем требуемой памяти или
длительность ее использования может варьироваться, причем точные значения
размера и длительности становятся известны только после запуска программы.
В отличие от автоматически выделяемых областей, которые собираются системой
без нашего участия, как только распадается стек, динамически выделенные
области остаются неотъемлемыми частями адресного пространства процесса, пока не
будут высвобождены вручную, поэтому программист отвечает за возврат динамически
выделяемой памяти в системе. Если не сделать free() программа так и не вернет
память в систему. Такой тип программной ошибки называется утечкой памяти.

Способов выделения памяти довольно много: malloc, calloc, realloc, brk, и многие другие
Есть так же автоматические и статическое выделение памяти
(переменные в стеке или глобальные переменные в куче)

Важные ошибки:
Ошибка сегментирования(seg fault)
обращение к чужому сегменту памяти.

Утечка памяти(memory leak)
не освободили память, получили загрязнение RAM.

Переполнение буфера(stack smashing)
передали больше чем нужно, например - arr[10], передаю 12.

unsigned integer overflow
переполнение числа, выход за пределы числа.


--- Ошибка сегментации
Ошибка программного обеспечения, возникающая при попытке обращения к недоступным
для записи участкам памяти либо при попытке изменить память запрещённым способом.
Сигнал SIGSEGV. Переполнение памяти. Ошибка сегментации нужна для защиты памяти в ОС.
ОС пытается сослаться на другой сегмент памяти, который ему не принадлежит или
записать на фрагмент предназначенного для чтения.

Например - переполнение:
int main() {
  main();
}


--- Ячейки памяти
В Linux, как и в большинстве операционных систем, память делится на различные области
с разными уровнями доступа. Эти области могут быть доступны только для чтения (read-only),
только для записи (write-only), или для чтения и записи (read-write).

Области памяти, доступные только для чтения, обычно содержат исполняемый код программ.

Области памяти, доступные для записи, используются для хранения данных, которые могут
изменяться в процессе работы программы, например, переменные, структуры данных, буферы и т.д.

Система управления памятью в Linux использует таблицы страниц, которые отслеживают уровни
доступа к каждой странице памяти и обеспечивают защиту памяти, не позволяя программам
записывать в области, предназначенные только для чтения, или читать из областей,
предназначенных только для записи. Это помогает предотвратить ошибки и повышает
безопасность системы.


--- Адресное пространство (стек / куча)
Стек и Куча - хранилище данных в оперативной памяти (RAM).
Стек используется для статичного выделения памяти.
Куча для динамического выделения.

* Стек - это область оперативной памяти, которая создается для каждого потока.
Он работает в порядке LIFO (Last In, First Out), то есть организован стек по принципу
стопки тарелок, мы не можем брать тарелку из середины стопки, можем брать только верхнюю
и класть тарелку тоже можем ТОЛЬКО на верх стопки.

Другими словами это область памяти в которой программа хранит информацию о вызываемых функциях,
их аргументы и каждой локальной переменной в функциях. Недостаток - это размер стека,
ибо он фиксированный и превышение лимита памяти ведет к stack smashing. Переменные,
расположенные на стеке, всегда являются локальными, но если в программе нужно использовать
динамические структуры данных или глобальные переменные, то для этого подойдет "Куча".

Почему стек работает быстрее? Потому что у него есть единственный параметр с которым
работает - это указатель положения стека (регистр) - поэтому все операции со стеком
работают в разы быстрее чем с кучей, операция извлечения/записи из стека это
1 действие POP/PUSH

А в куче наоборот может быть много операций при извлечении/записи
Но в стеке ограничен размер (меньше чем куча)

Поддерживает две базовые операции:
push (кладет на вершину стека) / pop (снимает с вершины стека)

Практическим примером может служить:
pushd - меняет текующий каталог и ставит новый каталог на вершину стека
popd  - удаляет с вершины стека current каталог и возвращается к прошлому
dirs  - показывает стек каталогов

пример можно посмотреть в gdb - where
#0  loop () at shell.c:152 - новый элемент
#1  0x000055555555581f in main () at shell.c:199 - старый элемент

* Куча - это склад переменных, которое допускает динамическое выделение памяти.
Когда мы выделяем участок памяти в куче, то к этому участку мы можем обратиться
из любой точки программы (не только из потока). Взаимодействие с кучей происходит с помощью
указателей, и если не освобождать память в куче, то работа кучи будет замедленна.

В сравнении со стеком, куча работает медленнее, поскольку переменные разбросаны по памяти,
а не сидят на верхушке стека, некорректное управление памятью в куче приводит к замедлению
её работы. Аллокация - выделение памяти (в куче)


--- Виртуальная память
Это концепция, которая позволяет уйти от использования физических адресов, используя
вместо них виртуальные. Вся виртуальная память делится на участки памяти постоянного
размера, называемые страницами. Управляет целыми страницами. Страницы разбиваются по 4-8КБ
Когда процессу требуется память, ОС выделяет одну или несколько страниц памяти.
Каждая страница имеет свой уникальный адрес.

Память состоит из битов, причем восемь бит составляет один байт. Байты складываются
в слова, а слова - в страницы, страницы в таблицу страниц, а таблицы в каталог страниц.
Страница - это наименьшая адресуемая сущность в памяти, которой может управлять блок
управления памятью (MMU), поэтому можно сказать, что страницы "нарезаются" из адресного
пространства процесса. Размер страницы зависит от архитектуры
машины (наиболее распространенными размерами является 4кбайт)

Важно понимать что адресное пространство, которое каждая программа в ОС считает свое памятью,
является памятью ВИРТУАЛЬНОЙ. Благодаря виртуализации ни один процесс не может получить
доступ к памяти, которая ему не принадлежит.

Если прописать print &p то можно получить адрес и важно понимать что это "фальшивый" (виртуальный)
адрес. В физической памяти по адресу 0x7ffe60a1465c - ничего не хранится. Все пользовательские программы
манипулируют виртуальными адресами, и только на уровне ядра или аппаратных драйверов допускается
использование адресов физичеческой памяти. Это делается для того чтобы скрыть от пользовательских
программ физические адреса памяти, что те не повредили чего-либо.

MMU (memory management unit) - компонент аппаратного обеспечения компьютера,
реально существует в ПК (устройство), не ядро это делает и не программа, а физическое устройство
через который проходят все запросы к памяти, совершаемые процессором.
Управляет виртуальной и физической памятью. MMU работает совместно с процессором.

Когда CPU пытается получить доступ к определенному адресу памяти, MMU перехватывает
запрос и переводит его, определяя, соответствует ли он валидному сегменту физической
памяти, и если да, то перенаправляет запрос на правильное место (виртуальное).

Задача этого устройства - трансляция адресов, управление кэшированием памяти и её защита.
С помощью переадресации (транслирование, преобразование адресов) - процесс сопоставления виртуального
адреса физическому. То есть ОС должна знать все соответствия виртуальных адресов физическим.
MMU используется только тогда, когда процессор обращается к памяти, а все остальное время
не используется и экономит электроэнергию.

*Если бы не было MMU*:
Программист, линкуя программу, должен знать, по каким адресам находится оперативная память.
Если у вас припаяно 640 кБ оперативки, отображаемой в адреса 0x02300000-0x0239FFFF,
то все адреса в вашей программе должны попадать в эту область.

Влиять на кэши и физическую память мы не можем, нам доступна только виртуальная память
Говоря другими словами, ядро связывает каждый процесс с собственным уникальным виртуальным
адресным пространством данного процесса.

Операционная система гораздо сложнее без виртуальной памяти.


--- Преимущества виртуальной памяти
Управление виртуальной памятью отделяет виртуальное адресное пространство процесса от
физического адресного пространства оперативной памяти. Это дает множество преимуществ.

Процессы изолированы друг от друга и от ядра, поэтому один процесс не может прочитать или
изменить память другого процесса или ядра. Это достигается за счет записей в таблице
страниц для каждого процесса, указывающих на различные наборы физических страниц
в оперативной памяти (или в области подкачки).

Программистам и таким инструментам, как компилятор и компоновщик, не нужно
знать о физическом размещении программы в оперативной памяти.

Программа загружается и запускается быстрее, поскольку в памяти требуется разместить
только ее часть. Кроме того, объем памяти для среды выполнения процесса (то есть виртуальный размер)
может превышать емкость оперативной памяти.


--- Страницы памяти и страничные кадры
Смотреть 'pages.png'
Виртуальная память разделена на страницы, это такие фрагменты размером 4КБ.

Страницы памяти (memory pages) - это логические блоки виртуальной памяти, которые операционная
система использует для управления и организации доступа к физической памяти. В Linux размер
страницы памяти обычно составляет 4 КБ, хотя существуют и большие страницы (например, HugePages).

Страничные кадры (page frames) - это блоки физической памяти, которые соответствуют размеру
страницы виртуальной памяти. Другими словами, каждый страничный кадр является контейнером
в физической памяти для хранения данных одной страницы виртуальной памяти.

Основное различие между ними заключается в том, что страницы памяти относятся к виртуальной памяти
(адресное пространство, которое видит процесс), а страничные кадры - к физической памяти
(реальное место в оперативной памяти, где хранится информация).

Когда процесс обращается к определенной странице виртуальной памяти, операционная система должна
перевести этот виртуальный адрес в физический адрес, чтобы определить, какой именно страничный
кадр содержит нужные данные. Этот процесс называется страничным преобразованием (page mapping)
и управляется системой страничной трансляции с помощью структур данных, таких как таблицы страниц.

Базовой единицей в организации памяти для систем UNIX/Linux является страница памяти.
Обладающая размером от 4 Кбайт (зависит от архитектуры), которому соответствует объём
физического пространства в оперативной или виртуальной (область подкачки на диске
или другом устройстве хранения) памяти.

При запуске процессов, они запрашивают у системы память для своей работы. А в ответ на это
ядро выделяет для них достаточное количество страниц памяти. Ядро выделяет процессам столько
памяти, сколько им необходимо. В том смысле, чтобы её (памяти) всегда хватало.
Поскольку выполнение процессов должно происходить в реальной физической памяти.
То ядро постоянно перемещает страницы памяти процессов между физической и виртуальной памятью.

Когда процессу не хватает памяти, то ядро начинает искать «занятые» страницы. Которые можно
использовать для «голодающего» процесса. Обычно такими страницами являются те, что давно не
были использованы. Ядро проверяет их на предмет модификации каким-либо процессом. Для этого существуют
определённые признаки, при последнем обращении и если изменения были, то такие страницы помечаются
ядром как «грязные». Т.е. такие, которые ещё нужны процессам. Для повторного использования памяти
такие страницы сначала обязательно переносятся в виртуальную память. Все же остальные страницы
являются «чистыми». И поэтому ядро их использует для предоставления другим или «голодающим» процессам.

Наименьшая единица памяти, которую может адресовать процессор, — это машинное слово,
модуль управления памятью (MMU, Memory Management Unit) — аппаратное устройство, которое
управляет памятью и отвечает за трансляцию виртуальных адресов в физические  — обычно работает
со страницами. Поэтому модуль MMU управляет таблицами страниц на уровне страничной
детализации (отсюда и название). С точки зрения виртуальной памяти,
страница — это наименьшая значащая единица.

Процессы видят память постранично. Каждый процесс видит свой приватный набор страниц со своей
логической адресацией. Для каждой выделенной (allocated) страницы ядро устанавливает набор
прав доступа (как с обычными файлами в файловой системе) – страница может быть доступна
на чтение (readable), запись (writable) и/или выполнение (executable).

Размер страницы можно получить:
$ getconf PAGE_SIZE


--- Размер стека
По-умолчанию размер стека равен 8 MiB. Изначально под стек выделяется его первая страница памяти 4 KiB.
Если пользовательский код выходит за пределы этих 4 KiB, то происходит Page Fault, которое ловит ядро.
Затем ядро проверяет, не вышел ли стек за границу в 8 MiB. Если не вышел — выделяет новую странцу
для стека (стек растет), если вышел — убивает процесс.


--- Размер кучи
В приложении с 32-битным адресным пространством объем кучи не может превышать 4GB.
Скорее всего это так же касается и 64 битной архитектуры (не больше 7-8GB).


--- Еще немного про MMU
Центральный процессор имеет блок управления памятью (MMU) для обеспечения
гибкости доступа к ней. Ядро помогает MMU, разбивая память, используемую
процессами, на более мелкие фрагменты, называемые страницами.

Ядро поддерживает структуру данных, называемую таблицей страниц,
которая сопоставляет адреса виртуальных страниц процесса с реальными адресами
страниц в памяти. Когда процесс обращается к памяти, MMU преобразует виртуальные
адреса, задействуемые процессом, в реальные адреса на основе таблицы страниц ядра.

На самом деле пользовательскому процессу не нужно, чтобы все его страницы
памяти немедленно оказывались доступными для запуска. Ядро обычно загружает
и выделяет страницы по мере необходимости процесса, эта система известна
как загрузка страниц по требованию, или просто загрузка по требованию.

Как программа стартует и запускается как новый процесс:

1. Ядро загружает начало кода инструкции программы на страницы памяти.

2. Ядро может выделить несколько страниц рабочей памяти для нового процесса.

3. По мере выполнения процесс может достичь точки, когда следующая инструкция
в его коде не будет содержаться ни на одной из страниц, изначально
загруженных ядром. В этот момент ядро берет на себя управление, загружает
необходимую страницу в память, а затем позволяет программе возобновить
выполнение.

4. Аналогично, если программе требуется больше рабочей памяти, чем было
выделено изначально, ядро обрабатывает ее, находя свободные страницы
(или выделяя место) и назначая их процессу.


--- Размеры
Файловые дескрипторы начинаются с 0 и заканчиваются цифрой 1024,
но при необходимости эту цифру можно повысить.

Размер стека
По-умолчанию размер стека равен 8 MiB. Изначально под стек выделяется его первая страница памяти 4 KiB.
Если пользовательский код выходит за пределы этих 4 KiB, то происходит Page Fault, которое ловит ядро.
Затем ядро проверяет, не вышел ли стек за границу в 8 MiB. Если не вышел — выделяет новую странцу
для стека (стек растет), если вышел — убивает процесс.

Размер кучи
В приложении с 32-битным адресным пространством объем кучи не может превышать 4GB.
Скорее всего это так же касается и 64 битной архитектуры (не больше 7-8GB).

Страницы разбиваются по 4-8КБ (часто 4КБ)


--- Core dump - дамп памяти
Это файл, который содержит адресное пространство (память) процесса, когда процесс
неожиданно завершается. Этот файл, хранит в себе все секции памяти процесса.
Ошибку сегментирования можно выявить с помощью gdb, понять в какой функции она
воспроизводится.

Чтобы понять предел дампов:
$ ulimit -c

Если он возвращает нуль, то дампы не будут созданы
Лучше чтобы он возвращал unlimited, задать это можно так:
$ ulimit -c unlimited

Если нет sysctl.conf файла, то можно создать:
kernel.core_pattern = /tmp/core-%e-%s-%u-%g-%p-%t
fs.suid_dumpable = 2
kernel.core_uses_pid = 1

Так же можно обратиться к: /etc/sysctl.conf для проверки, куда будет происходить сохранение
Чтобы применить изменения файла sysctl.conf можно использовать:
$ sysctl -p

После данных манипуляций файл дампа, начнет появляться в /tmp/
Чтобы прочитать дамп и понять зачем он нужен, надо сделать:
$ gdb /path/to/binary /path/to/core_dump
Естественно binary должен скомпилирован с отладочной информацией.

Затем открывается gdb в котором можно использовать данные иструкции:
$ bt                 # выдает последовательность стека
$ bt full            # выдает всё
$ frame <number>     # выбирает кадр для изучения кода

$ info locals        # чтобы увидеть переменные

Так же в начале gdb можно увидеть строку:
#0  0x00007f89ceb159fe in __strcmp_avx2 () from /usr/lib/libc.so.6
Которая говорит нам о том, где произошел segfault
В данном случае происходил strcmp нулевого указателя, сделал print command[1]
и он вернул 0x0, в этом и был segfault

В некоторых системах sysctl не прокатывает и потребуется установка systemd-coredump
хранит эти файлы в /var/lib/systemd/coredump/

$ coredumpctl gdb


--- I/O devices
Устройства ввода-вывода (Input/Output devices, I/O devices) – это периферийные устройства,
которые подключаются к компьютеру и позволяют ему взаимодействовать с окружающим миром
или с пользователем. Клавиатура, мышь, сканер, микрофон, принтер и т.д.


--- DMA
Direct Memory Access.
Это технология, позволяющая устройствам ввода-вывода (например, сетевым картам,
дискам или видеокартам) напрямую обмениваться данными с оперативной памятью компьютера,
минуя центральный процессор (CPU). Это позволяет увеличить скорость передачи данных
и снизить нагрузку на процессор.

В операционной системе Linux, как и в других ОС, DMA используется для ускорения
работы с периферийными устройствами. Для управления DMA в Linux используется
специальный подсистема ядра, называемая DMA Engine. Эта подсистема предоставляет
интерфейс для драйверов устройств, позволяя им настраивать и контролировать
передачу данных через DMA.

DMA работает в kernelspace, то есть в пространстве ядра, так как требует прямого
доступа к аппаратным ресурсам системы и управления памятью.

Применение DMA позволяет значительно ускорить работу с устройствами, особенно в случаях,
когда требуется передача больших объемов данных. Например, при записи данных на жесткий
диск или при передаче файлов по сети.

Однако использование DMA также предъявляет повышенные требования к безопасности,
так как неправильно сконфигурированные или дефектные устройства могут напрямую
обращаться к памяти, что потенциально может привести к сбоям или уязвимостям в системе.
Поэтому важно, чтобы драйверы устройств были корректно реализованы и тщательно проверены.


--- IOMMU
Это похоже на то, как традиционный MMU (Memory Management Unit) управляет
доступом к памяти для процессора, но IOMMU нацелен на устройства ввода/вывода.

Input/Output Memory Management Unit.
Данный компонент позволяет ОС управлять доступом к памяти ввода/вывода устройств.
IOMMU обеспечивает изоляцию памяти между различными устройствами, что позволяет
им безопасно обмениваться данными и предотвращает возможные конфликты.

Устройства ввода/вывода: клавитура, мышь, сканер, веб-камера, микрофон, сенсорный экран,
джойстик, монитор, принтер, проектор, колонки, USB накопитель, жесткий диск, SSD,
сетевой адаптер.

(Virtual addresses) (Physical addresses)
CPU -> MMU -> Main Memory.

(Virtual addresses) (Physical addresses)
Device -> IOMMU -> Main Memory.

IOMMU преобразует адреса устройств I/O в физические адреса памяти, что позволяет
устройствам безопасно обращаться к памяти, не влияя на работу других устройств
или ядра системы.

IOMMU помогает предотвратить нежелательный доступ устройств к памяти и защищает
систему от потенциальных атак через устройства ввода-вывода.

IOMMU работает в пространстве ядра (kernelspace), так как является низкоуровневым
механизмом управления памятью, который тесно интегрирован с аппаратным обеспечением системы.
В Linux поддержка IOMMU реализована через различные модули ядра и драйверы, такие как vfio,
которые предоставляют интерфейсы для взаимодействия с IOMMU.
