Инженеру, который пишет программы для виртуальной машины уровня n, не
обязательно знать о трансляторах и интерпретаторах более низких уровнях.
Машина исполнит эти программы, и не важно, будут они поэтапно испольняться
интерпретатором или же их обработает сама машина. В обоих случаях результат один
и тот же - это исполнение программы. Большинству программистов, использующих
машину уровня n, интересен только самый верхний уровень. Однако те, кто хочет
понять, как в действительности работает ПК, должны изучить все уровни.

Уровень 0 - Цифровой логический уровень (аппаратное обеспечение)
Уровень 1 - Микроархитектура (интерпретация или выполненине)
Уровень 2 - Набор команд (частичная интерпретация ОС)
Уровень 3 - Операционная система (трансляция - ассамблер)
Уровень 4 - Ассамблер (трансляция - компилятор)
Уровень 5 - Прикладные языки программистов

Компьютер проектируется как иерархическая структура уровней, которые
надстраиваются друг над другом.

Аппаратное обеспечение состоит из материальных объектов - интегральных схем,
печатных плат, кабелей, источников электропитания, модулей памяти и принтеров.

Программное обеспечение, напротив, состоит из алгоритмов (команд). Программы
могут храниться на жестком диске, гибком диске или других носителях. То есть
программы это набор команд, а не физические носители, на которых эти программы
записаны.

Шина - соединение, служащее для передачи данных. Процессор это сердце ПК, а шины
- это те артерии, по которым бегут электрические сигналы. И те разъемы, куда
обычно вставляются жесткие диски, сетевые карты (это не шины, это лишь
слоты-интерфейсы, и именно с их помощью происходит подключение к шинам).
С помощью шин компьютерные устройства обмениваются информацией.

Шина в компьютере - это набор проводов или путей, которые используются для
передачи данных между различными компонентами компьютера, такими как процессор,
оперативная память, жесткий диск и другие устройства. Шины позволяют этим
компонентам общаться друг с другом и обмениваться информацией.

Транзисторы - они выполняют всю компьютерную работу, считают, запускают
программы и т.д. Через транзистор идёт какой-то один ток, а другим током этот
поток можно либо пропустить, либо заблокировать. Из миллиардов таких простейших
транзистеров и состоит любая современная вычислительная машина: от чайника с
электронным управлением до суперкомпьютера в подвалах Пентагона. И до чипа в
смартфоне. Чем больше транзисторов, тем больше объем памяти и мощнее процессоры.

Современные процессоры содержат транзисторы. Транзисторы являются основными
строительными блоками для создания электронных схем в процессорах. Они
используются для усиления сигналов, коммутации и регулирования напряжения.
В современных процессорах может содержаться миллиарды транзисторов,
изготовленных с использованием технологии кремниевых полупроводников.

Кэш-память позволяет держать наиболее часто используемые слова внутри ЦПУ и
избегать (медленных) обращений к основной памяти.

Компьютер состоит из связанных между собой процессоров, модулей памяти и
устройства ввода-вывода. ЦПУ - это мозг компьютера. Его задача выполнять
программы, находящиеся в основной памяти. Что делает CPU: Читает из памяти
инструкции, выполняет их, возвращает обратно в память результат.

Память - это тот компонент компьютера, в котором хранятся программы и данные.
Без памяти, откуда процессоры считывают и куда записывают информацию, не было бы
современных цифровых компьютеров.

Основной единицей хранения данных в памяти является двоичный разряд, который
называется битом. Бит может содержать 0 или 1. Эта самая маленькая единица
памяти (Устройство, в котором хранятся только нули, вряд ли могло быть основой
памяти - необходимы, по крайней мере, два значения).

Память состоит из ячеек, каждая из которых может хранить некоторую порцию
информации. Каждая ячейка имеет номер, который называется адресом. Можно
ссылаться на определенную ячейку по адресу.

Ячейка - минимальная адресуемая единица памяти. В последние годы практически все
производители выпускают компьютеры с 8-разрядными ячейками, которые называются
байтами.

Процессоры всегда работали быстрее, чем память. Поскольку процессоры и память
совершенствуются параллельно, это несоответствие сохраняется. Поскольку на
микросхему можно помещать все больше и больше транзисторов, что ускоряет работу
процессора.

Память небольшого объема с высокой скоростью работы называется кэш-памятью.
Основная идея кэш-памяти проста, в ней находятся слова, которые чаще всего
используются. Если процессору нужно какое-нибудь слово, сначала он обращается к
кэш-памяти. Только в том случае, если слова там нет, он обращается к основной
памяти. Если значительная часть слов находится в кэш-памяти, среднее время
доступа значительно сокращается.

Важно отметить, что связанные между собой компьютеры должны поддерживать одни и
те же коды символов, иначе они не смогут обмениваться информацией. Представление
символа в виде целого числа называют "кодом символа".

Каждый ASCII - символ содержит 7 бит, таким образом, всего можно закодировать
128 символов. Компьютерная промышленность развивалась преимущественно в США,
что привело к появлению кода ASCII, более подходящего для английского языка, чем
для других языков. Французский, немецкий и т.д. не входит в набор ASCII. Для
этого есть Unicode Поставщики ПО хотели реализовать свою продукцию не только на
английским языке, но и на других тоже. Основная идея Unicode - прописать каждому
символу единственное постоянное 16-разрядное значение. Unicode требовал 16-бит
для обычного английского текста, что расточительно. Поэтому появилось UTF-8
кодировка, имеет длину от 1 до 4 байт. Одно из преимуществ UTF-8 заключается в
том, что коды от 0 до 127 используются для представления ASCII - символов. Таким
образом, одному символу соответствует один байт (вместо двух байт в Unicode).

Компьютер состоит из: процессор, память, устройства ввода-вывода. Память
компьютера можно разделить на основную (ОЗУ, ПЗУ) и вспомогательную (диски).
Основная память используется для хранения программ, которые выполняются в данный
момент. Время доступа к основной памяти невелико. А к кэш-памяти еще быстрее
обращение. Время доступа к вспомогательной памяти, напротив, гораздо больше
(магнитные диски, оптические диски).

В ОЗУ процессор записывает информацию и считывает. При выключении компьютера
информация в ОЗУ стирается. В ПЗУ процессор не может записывать информацию. ПЗУ
предназначено только для чтения информации, записанной на заводе-изготовителе.
При выключении ПК информация сохраняется.

Устройства ввода-вывода используются для передачи информации в компьютере и из
компьютера. Они связаны с процессором и памятью одной или несколькими шинами. В
качестве примеров можно назвать терминалы, мыши, принтеры и модемы. Большинство
устройств ввода-вывода используют код ASCII, хотя Unicode уже стремительно
распространяется по всему миру, а UTF-8 получает все большее распространение.

Основные виды клавиатур:
* Мембранные (обычные)
* Механические (дорогие)
* Сенсорные

Сетевой кабель, называется:
Ethernet кабель, либо Patch Cord (витая пара)

Провода для мониторов:
* VGA
Аналоговый интерфейс, устарел (синий разъем, небольшого размера)

* DVI
Цифровое подключение, не сильно устарел
(черный, широкий разъем, немаленький, сбоку есть одинокий усик)

* HDMI (улучшенная версия DVI)
Адаптация DVI для бытовой аппаратуры, присутствует практически во всех
телевизорах, плазменных панелях и проекторах

* Display Port (улучшенная версия DVI)
Интерфейс, видеокарта-монитор DisplayPort не заменит HDMI: эти два стандарта
ориентированы на разные сегменты рынка: HDMI – на бытовую аудио-видео
аппаратуру, а DisplayPort – на компьютеры и профессиональное оборудование

Системный блок состоит из:
* Материнская плата
Нужна для подключения комплектующих ПК
Процесс, видеокарта, устанавливается на мат.плату
Жесткий диск и блок питания тоже подключаются к мат.плате (с помощью проводов)

* Процессор
Калькулятор

* Видеокарта
Графическая плата, вывод картинки на монитор
- Дискретная видеокарта (отдельное устройство, плата с графическим процессором)
- Встроенная видеокарта (уже встроена в материнскую плату)

* Оперативная память (RAM)
Плата, которая хранит в себе данные ПК (временная память)

* Жесткий диск (HDD) или SSD
Постоянная память

HDD состоит из:
- контроллер (управляет всем этим)
- считывающие головки (не касается диска, а если каснется, то данные будут
  потеряны - Head crash) например, влияние сильного магнита, может осуществить Head crash
- магнитные диски

SSD состоит из:
- контроллер
- DRAM
- Ячейки Flash памяти

* Дисковод
Нужен для работы с дисками

* Система охлаждения (кулеры)
Охлаждают необходимые устройства

* Звуковая карта
С обратной стороны системного блока можно увидеть разноцветные кружочки
(туда вставляются колонки, гарнитуры)
Это и есть звуковая карта

* Блок питания
Обеспечивает комплектующим электроэнергию

* Корпус
Все вышеописанные комплектующие входят в корпус

SD адаптер, это переходник, предназначен для подключения карт памяти Micro SD к
фотокамере, ноутбуку, настольному ПК, планшету и т.д. А сам Micro SD это
накопитель, работают с любым оборудованием.

Программистам приходится иметь дело с логическими задачами так часто, что у них
от этого ум за разум заходит. Однако на самом деле многие из них логику не
изучали и пользуются ею бессознательно.

Память, она же ОЗУ, - это то место, где мы пишем команды. Она также хранит
данные, которыми компьютер оперирует. Процессор, или ЦП, получает команды и
данные из памяти и выполняет соответствующие вычисления.

Память поделена на множество ячеек. Каждая хранит крошечный объем данных и имеет
числовой адрес. Чтение или запись данных в памяти выполняется посредством
операций, которые воздействуют на одну ячейку за раз. Чтобы прочитать ячейку
памяти или произвести запись в нее, мы должны передать ее числовой адрес.

Каждый провод передает двоичную цифру. Высокое напряжение соответствует сигналу
«единица», низкое - сигналу «ноль».

Память способна выполнить с адресом ячейки две операции: получить хранящееся в
ней значение или записать новое.

В любом компьютере ЦП и ОЗУ постоянно обмениваются данными: процессор выбирает
команды и данные из памяти и иногда сохраняет туда данные для вывода и
промежуточные результаты вычислений.

Центральный процессор имеет несколько ячеек внутренней памяти, которые
называются регистрами. Он может выполнять простые математические операции с
числами, хранящимися в этих регистрах. Он также может перемещать данные между
регистрами и ОЗУ.

Вот примеры типичных операций, которые приходится исполнять центральному процессору:
* скопировать данные из ячейки памяти № 220 в регистр № 3;
* сложить число в регистре № 3 с числом в регистре № 1.

Набор всех операций, которые может выполнять ЦП, называется его набором команд.
Набор команд современных ЦП огромен. Вот примеры:
* NOP 0 0 0 0 - No operation
* INC 0 1 1 0 - Increment contents of register
* DAC 1 1 1 1 - Decrement accumulator
и т.д

ЦП работает в бесконечном цикле, постоянно выбирая и исполняя команды из памяти.

Программный код даже может изменять сам себя за счет включения команд, которые
переписывают части собственного кода в ОЗУ. Нередко компьютерные вирусы
поступают именно так, чтобы затруднить их обнаружение антивирусным ПО. Здесь
можно провести удивительную параллель с биологическими вирусами, изменяющими
свои ДНК, чтобы спрятаться от иммунной системы носителей.

Открываете ли вы сайт, играете ли в компьютерную игру или редактируете
электронную таблицу, вычисления всегда одинаковы: это серия простых операций,
которые могут лишь суммировать, сравнивать или перемещать данные в памяти.

Тактовая частота ЦП. Например, 2МГц, этот показатель - число базовых операций,
которые процессор выполняет в секунду. Это примерно 2 млн базовых операций в
секунду.

Почему нельзя вставить компакт-диск для Sony PlayStation в настольный компьютер
и начать играть? Или почему приложения для iPhone не запускаются на Mac?
Причина проста: разные архитектуры ЦП.

Эмулятор имитирует целевую машину: компьютер притворяется, что имеет тот же ЦП,
ОЗУ и другие аппаратные средства.

Уже не раз было подтверждено, что государственные учреждения шпионят за
миллионами граждан, используя неисправленные уязвимости защиты в повседневном
потребительском программном обеспечении.

Компьютер работает за счет ЦП, который исполняет простые команды. Эти команды
могут оперировать только данными, хранящимися в регистрах ЦП. Однако их емкость
обычно намного меньше тысячи байтов. Это означает, что регистрам ЦП постоянно
приходится перемещать данные в ОЗУ и обратно.

Если доступ к памяти медленный, то ЦП приходится простаивать, ожидая, пока ОЗУ
выполнит свою работу. Время, которое требуется, чтобы прочитать и записать
данные в память, непосредственно отражается на производительности компьютера.

Недавние технические разработки позволили экспоненциально увеличивать скорость
ЦП. Быстродействие памяти тоже растет, но гораздо медленнее. Эта разница в
производительности между ЦП и ОЗУ называется разрывом между памятью и
процессором: команды ЦП «дешевы» - мы можем выполнять их в огромном количестве,
тогда как получение данных из ОЗУ занимает намного больше времени и потому
обходится «дорого». По мере увеличения этого разрыва возрастала важность
эффективного доступа к памяти.

В современных компьютерах требуется приблизительно тысяча циклов ЦП, чтобы
получить данные из ОЗУ, - около 1 микросекунды. Это невероятно быстро,
но составляет целую вечность по сравнению со временем доступа к регистрам ЦП.
Программистам приходится искать способы сократить количество операций с ОЗУ.

Схема "Быстро и эффективно" <-> "Больше объем, но долго":
ЦП Регистры -> Кэш L1/L2/L3 -> ОЗУ -> Жесткий диск -> Внешняя память -> Третичная память (диски)

Как правило, на перемещение данных между диском и ОЗУ требуется миллион циклов
ЦП - целая миллисекунда. Может показаться, что это все равно быстро, но не стоит
забывать: в то время как доступ к ОЗУ занимает всего 1000 циклов, на доступ к
диску их уходит миллион. ОЗУ нередко носит название первичной памяти, а
программы и данные, хранящиеся на жестком диске, являются вторичной памятью.

ЦП не может обращаться к вторичной памяти напрямую. Программы, которые хранятся
во вторичной памяти, нужно скопировать в первичную - только тогда они будут
исполнены. В действительности всякий раз, когда вы загружаете компьютер, даже
операционную систему приходится копировать с диска в ОЗУ, прежде чем ЦП сможет
ее выполнить.

Никогда не истощайте ОЗУ! Очень важно, чтобы все данные и программы, которыми
компьютер управляет во время обычной работы, могли уместиться в его ОЗУ. В
противном случае он будет постоянно перемещать их между диском и ОЗУ. Поскольку
этот процесс очень медленный, производительность компьютера сильно падает, и он
становится бесполезным. В таком случае он большую часть времени ждет, пока
данные будут перемещены, вместо того чтобы выполнять фактические вычисления.

Недостаточный объем ОЗУ, возможно, является одной из главных причин отказа
серверов.

Спустимся еще ниже по иерархической лестнице памяти. Если компьютер подключить к
локальной или глобальной сети, он может получить доступ к памяти, управляемой
другими компьютерами. Но этот процесс требует еще больше времени: если на чтение
локального диска уходит миллисекунда, то получение данных из сети может занимать
сотни миллисекунд. Только на то, чтобы сетевой пакет переместился с одного
компьютера на другой, требуется порядка десяти миллисекунд. Если сетевой пакет
проходит через Интернет, то он часто движется намного дольше, от двухсот до
трехсот миллисекунд.

Когда нам лень выполнять скучную работу, мы переносим инструкции в программу, и
компьютер выполняет их за нас. Программистская лень серьезно помогла прогрессу.

Первым программистам приходилось вводить код в компьютер вручную, используя
единицы и нули, но они тоже были ленивы. Они решили, что будет намного лучше
записывать последовательность команд ЦП при помощи мнемоник, таких как CP для
команды «копировать», MOV для команды «переместить», CMP для команды «сравнить»
и т.п. Затем родился язык Ассемблер.

Парадигмы программирования - это фундаментальные стили или подходы, используемые
в процессе разработки программного обеспечения. Они определяют структуру и
организацию кода, методы его написания и выполнения.

В Linux нет технологии которая бы позволяла залезть процессу в память другого
процесса. Но почему это может gdb? Ему разрешает это сделать ядро с помощью
системного вызова (ptrace). ptrace позволяет одному процессу "следить" за
выполнением другого процесса, останавливать его, проверять и изменять его
регистры и память (даже файл называется в честь него ptrace_scope).

Способы защиты данных от атак со стороны неавторизованных сторон называются
криптографией. Алгоритм, который обратимо шифрует открытые данные в непонятную
форму, называется шифром. Большинство систем могут быть защищены с помощью
криптографических библиотек, проверенных экспертами.

Один из самых ранних шифров был использован Юлием Цезарем более двух тысяч лет
назад для отправки тайных писем своим генералам. Его зашифрованные сообщения
выглядели как-то так:

GR QRW EULQJ DQB ERGB RI PHQ DFURVV WKH UKLQH

Если секретное письмо Цезаря перехватывали, информация, содержащаяся в нем, так
и оставалась конфиденциальной. Враги Цезаря не могли понять смысла зашифрованных
сообщений, но генералы Цезаря могли легко их читать. Чтобы зашифровать
сообщения, римляне заранее договорились сдвинуть каждую букву исходного
сообщения на три позиции вперед по алфавиту (шифр сдвига).

Самый простой способ взломать шифр Цезаря - проверить различные ключи на
шифротексте и посмотреть, обретет ли выходной текст смысл.

Злоумышленник, который перехватывает ваш зашифрованный текст, может попытаться
взломать его с помощью грубой силы (метода полного перебора): перепробовать все
возможные ключи, пока не появится понятный открытый текст. Будьте пессимистичны:
предположите, что ваш злоумышленник знает, какой шифр вы используете, и обладает
в несколько раз большей вычислительной мощностью‚ чем располагаете вы. Если вы
выберете длинный и случайный ключ шифрования, то застрахуете себя от любой
возможной атаки грубой силой. Например, 120-битный случайный ключ не оставляет
злоумышленнику никаких шансов на грубый взлом ваших шифротекстов.

Хакер - это человек с глубокими знаниями компьютерных систем, способный достичь
определенных целей нестандартными способами. Хакеры часто специализируются на
наиболее низкоуровневых аспектах работы компьютеров. Например, многие хакеры в
подробностях знают, какие именно шаги делают компьютеры для выполнения того или
иного действия.

Большинство хакеров превосходно понимают сетевые протоколы, способны
манипулировать отдельными битами в сетевых пакетах и устраиваются на работу в
сфере ИТ-безопасности. Обладая такими знаниями, они обнаруживают лазейки,
которые позволяют им делать на компьютере то, на что у них нет разрешения.

Как правило, хакеры находят способы обойти (реже взломать) криптографию, которая
защищает компьютерную систему, вместо того чтобы взламывать ее.

Проектирование компьютерной системы похоже на строительство средневекового
замка. Нужно предвидеть, как различные типы злоумышленников будут пытаться
проникнуть в ваш замок, и предпринять контрмеры для каждого вектора атаки.
Знание того, как работают хакеры, способно помочь. Но поразительно, что наиболее
часто используемые механизмы взлома практически не требуют никаких технических
навыков.

Хакерские атаки чаще всего основаны на уязвимостях людей, а не оборудования.

Программисты знают, что зачастую написанные ими части кода работают не совсем
так, как предполагалось. По мере того как софт усложняется, различные ситуации,
которые он обрабатывает, умножаются экспоненциально, как и вероятность того, что
возникнет ситуация, в которой комбинация входных данных приведет ПО к
непредсказуемому, нежелательному поведению.

Это нежелательное поведение может привести к тому, что система обрушится и будет
раскрыта секретная информация. В худшем случае хакер сможет выполнять любой код
на компьютере, на котором размещена система (это называется уязвимость).

ПО написанное под x86 не будет работать под ARM. У каждой архитектуры процессора
свой набор команд. ПО которое работает на первых поколениях процессоров Intel
будет и работать на современных Intel процессорах. У каждого процессора свой
особенный ассемблер.

Слова "foo" и "bar" - это метасинтаксические переменные, которые часто
используются в программировании и технической документации в качестве временных
имен для переменных, функций, классов и других объектов. Они не имеют
какого-либо конкретного значения и используются для иллюстрации примеров кода
или концепций.

Причины их частого использования:

1. Универсальность: Поскольку "foo" и "bar" не имеют конкретного значения, они
могут быть использованы в самых разных контекстах, что делает их удобными для
примеров.

2. Традиция: Использование этих слов стало традицией в сообществе программистов,
восходящей к ранним дням компьютерных наук и инженерии. Они часто использовались
в учебниках и документации, что закрепило их использование.

3. Простота: Эти слова короткие и легко запоминаются, что делает их удобными для
быстрого написания и чтения примеров.

Иногда к "foo" и "bar" добавляют и другие метасинтаксические переменные, такие
как "baz", "qux" и т.д., если требуется больше примеров.

Происхождение этих слов не совсем ясно, но предполагается, что они могли
возникнуть из языка жаргона хакеров и инженеров, возможно, даже от военных
аббревиатур. В любом случае, их использование стало стандартом в технической
документации и обучающих материалах.
