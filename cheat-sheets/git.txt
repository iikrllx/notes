Темы:
* Описание
* Настройка
* Коммиты
* Отменить все изменения
* Убрать все добавленные файлы
* Удаление последнего коммита
* Удаление последних 3-4 коммитов
* Удаление коммита с сервера в режиме rebase
* Увидеть все изменения
* Инициализация проекта
* Удалить неотслеживаемые, новые файлы
* Изменение записи последнего коммита
* Сокращенная команда добавления
* Ветки
* Прибережения
* Изменение коммита в режиме rebase
* Тег и релиз
* Как изменить автора последнего коммита
* Работа в приватном репозитории
* master отстает от серверного-master и есть локальные изменения
* git push --force
* git revert
* git cherry-pick
* HEAD
* Личный серверный git
* git status и русские файлы
* upstream
* Долгое клонирование
* Права доступа файлов
* Merge Request и Pull Request
* GitHub vs Bitbucket vs GitLab
* Github traffic
* README, оформление, источники
* git format-patch
* Аббревиатуры, комментарии пользователей
* Максимальный размер файла/репозитория на GitHub
* git-lfs
* Создание пустых веток
* git push origin master и git push --set-upstream master


--- Описание
Система контроля версий (СКВ) - это система, регистрирующая изменения в одном
или нескольких файлах для того чтобы была возможность вернуться к прежним
версиям этих файлов. Под версионный контроль можно поместить файлы практически
любого типа.

* Локальные системы контроля версий
* Централизованные системы контроля версий (CVS, SVN)
* Распределенные системы контроля версий (GIT)

Для совершения большинства операций в GIT необходимы только локальные файлы
и ресурсы, то есть информация с других компьютеров в сети не нужна, а в
централизованных системах, где практически каждая операция имела сетевую
задержку. Вся история проекта хранится локально у нас на диске, все операции
кажутся мгновенными. Git не обращается к серверу в процессе. Даже если нет
сетевого подключения, можно делать коммиты, а после отправить коммиты на сервер.

Перед сохранением любого файла GIT вычисляет контрольную сумму, и она становится
индексом этого файла. При любом изменении контрольная сумма изменяется. Механизм
называется -> SHA-1 хеш. 40 символов вычисляемые на основе содержимого файла
или структуры каталога. GIT сохраняет в своей базе данных все по этим хешам,
а не по именам. 24b9da6552252987aa493b52f8696cd6d3b00373

Процесс использования GIT:
* Вносим изменения в файлах нашего рабочего каталога
* Подготавливаем файлы, добавляя их слепки в область подготовленных файлов
* Делаем коммит, который берет подготовленные файлы из индекса и помещает их
  в каталог GIT на постоянное хранение

Настройка среды GIT реализуется с помощью утилиты `git config` эти параметры
хранятся в трех файлах, global (конкретный пользователь), system (для всех),
и в том каталоге в котором находится репозиторий .git/config (настройка для
репозитория).

Если нам нужно осуществить клонирование `git clone` в каталог который отличается:
$ git clone git://github.com/schacon/grit.git dir_repo

Два состояния версионного контроля:
* отслеживаемые (в прошлом коммите есть слепки)
* неотслеживаемые (новые файлы, нет в прошлых коммитах)

Если нам нужно добавить файлы в индекс (начать их отслеживать):
$ git add .

Каждый раз делая коммит мы сохраняем снимок индекса, снимок нашего проекта
Для фиксации изменений используется:
$ git commit -v # открывает редактор с изменениями и просьбой ввести коммит
$ git commit -m # коммит в строку (без редактора)

С помощью `git commit -a` можно пропустить этап индексирования, эта команда
индексирует отслеживаемые файлы, позволяя обойти `git add`.

Если нам нужно переименовать файл лучше это делать с помощью:
$ git mv file fi

Просмотр списка удаленных репозиториев.
`git remote` и он возвращает origin это имя по умолчанию сервера с которого
произошло клонирование.

Просмотр urls:
$ git remote -v

Команда `git push` включает в себя два автоматических имени:
$ git push origin master
git push (сервер) (ветка)

Версии определяются > git tag

Если нужно посмотреть изменения определенного коммита
можно брать по сокращенному SHA или полному
$ git show 1c002dd4b536e7479fe34593e72e6c6c1819e53b

.gitconfig конфигурационный файл находится в домашней директории
$ ls -A ~/ | grep .gitconfig


--- Настройка
$ git config --global user.email "example@gmail.com"
$ git config --global user.name "exampleuser"

Параметр --global означает использование глобального файла конфигурации.

$ git config --list    # настройка git
$ git config user.name # конкретное


--- Коммиты
$ git log                                   # все коммиты
$ git log -2                                # два последних коммита
$ git log -p -1                             # изменения в последнем коммите
$ git log -p -1 <uid>                       # изменения конкретного коммита
$ git log --name-only                       # вместе с файлами

$ git log --oneline
$ git log --pretty=oneline                  # вывести в одну строку
$ git log --pretty=oneline | tail - 10      # последние строки
$ git log --since=1.weeks                   # за последнюю неделю
$ git log --abbrev-commit                   # список log с SHA-1 хешами
$ git log --abbrev-commit --pretty=oneline
$ git rev-list --count master               # кол-во логов

$ git log --follow -- <filename>            # покажет коммиты в которых редактировали данный файл
$ git log -- debian/upstream/metadata       # покажет коммиты в которых редактировали данный файл
$ git log -S "uzip_528239.patch"            # найти коммиты в котором есть определенный паттерн
$ git log -1 -- <filename>                  # последний коммит файла

Коммиты - это снимки моментов времени, когда выполняем операцию отмены в Git,
происходит будто перемещение по времени (назад) или на другую временную шкалу
(ветку), где ошибок не было.

$ git status                                # показывает статус
$ git status -s                             # показывает статус (только файлы)


--- Отменить все изменения
$ git checkout -- .


--- Убрать все добавленнные файлы
Это когда сделали `git add`, и затем хотим сбросить:
$ git reset -- .


--- Удаление последнего коммита
$ git reset --soft HEAD^1
$ git reset --hard HEAD^1
$ git push -f


--- Удаление последних 3-4 коммитов
Указываем коммит до которого хотим удалить:
$ git reset --hard 57fcc4acfc154c59985eb2147d2653804a64eb9f
$ git push --force


--- Удаление коммита с сервера в режиме rebase
$ git rebase -i HEAD~<n>
или
$ git rebase --root

Далее открывается текстовой редактор и перед коммитом нужно поставить параметр d
(drop), затем:
$ git push -f


--- Увидеть все изменения
Это команда сравнивает индексированные изменения с последним коммитом:
$ git diff

Если нам нужно посмотреть изменения неотслеживаемых файлов (после git add .):
$ git diff --cached


--- Инициализация проекта
Это команда создает в текущем каталоге новый подкаталог `.git` содержащий все
необходимые файлы репозитория.

$ git init
$ git remote add origin https://github.com/name/repo.git
$ git push -u origin master


--- Удалить неотслеживаемые, новые файлы
$ git clean -f
$ git clean -f file    # удалить конкретный файл
$ git clean -f -d      # удалить директории
$ git clean -fxd       # удалить все файлы


--- Изменение записи последнего коммита
$ git commit --amend (меняем текст в редакторе)
$ git push -f


--- Сокращенная команда добавления
$ git add . && git commit -m "desc"

А можно выполнить
$ git commit -am "desc" && git push


--- Ветки
Ветка по умолчанию в git называется master. Когда мы создаем коммиты на
начальном этапе, нам дана ветка master, её создает команда `git init`.
Можно заметить с помощью `git log` слово HEAD - это указатель на ветку.

$ git branch           # узнать текущую ветку
$ git branch -r        # все удаленные ветки
$ git branch -a        # все известные имена + удаленные
$ git branch --contains <SHA>
$ git branch -r --contains <SHA>

$ git branch testing   # создание новой ветки, но не переключает на неё
$ git checkout testing # переход на новую ветку

# если не видны какие-то ветки, скорее всего они на сервере
# получить все изменения, git status отобразит кол-во коммитов (отставание)
$ git fetch --all

$ git checkout -b name # создание ветки и переход на нее

Если сделали какие-то изменения на ветке осуществляем:
$ git commit -am 'changing from new branch'

Если нас устраивают эти изменения можно сделать слияние с основной веткой:
$ git checkout master
$ git merge first      # делаем слияние

Удаление ветки:
$ git branch -d first
$ git branch -D first  # если ветка имеет наработки, но нам всё равно надо её удалить

Последние коммиты на каждой из ветки:
$ git branch -v

Если нужно отправить ветку:
$ git push origin first

Если нужно удалить ветку на сервере:
$ git push origin :first

Если нужно сделать pull:
$ git pull origin new_branch

Если нам нужно создать отдельную ветку (без master):
$ git checkout --orphan new

Переименовать текущую ветку:
$ git branch -m <newname>
$ git push origin -u <newname>
$ git push origin --delete <oldname>


--- Прибережения
`git stash` или `git stash save`
Сохранит наработки перед переходом в другую ветку.
Чтобы отменить: `git stash pop`.


--- Изменение коммита в режиме rebase
$ git rebase --interactive 0fb46e900908fc508c0037813be46636e26f9995
$ git rebase -i 0fb46e900908fc508c0037813be46636e26f9995

r reword      переименовать коммит
e edit        изменить коммит
d drop        удаление

vim our_file.txt
$ git add .
$ git commit --amend
$ git rebase --continue
$ git push -f


--- Тег и релиз
Теги бывают: легковесный/аннотированный
$ git tag # вывод тегов

Создание аннотированного / полная информация о версии:
$ git tag -a v1.0 -m 'version - 1.0'
Отправление релиза на сервер:
$ git push origin v1.0

$ git push origin --tags
Отправка всех тегов

Создание легковесного / привязка к коммиту:
$ git tag v1.1
$ git push origin v1.1

Удаление тега:
$ git tag -d v1.0
$ git push origin :refs/tags/v1.0


--- Как изменить автора последнего коммита
$ git commit --amend --author="John Doe <john@doe.org>"


--- Работа в приватном репозитории
Для того чтобы делать push/pull в приватный репозиторий без запросов
логина/пароля, нужно клонировать репозиторий по SSH, а не по HTTPS, через
веб-морду `git clone ssh`, или же изменить в репозитории данной командой на ssh:
`git remote set-url origin git@github.com:user/repo.gi`. Затем создать ключ
командой: `ssh-keygen -t ed25519 -C "your_email@example.com"`. Скопировать
содержимое .pub ключа и добавить его через веб-морду.


--- master отстает от серверного-master и есть локальные изменения
$ git add . && git commit -m "<new releas>"

$ git pull --rebase
git может выдать ошибки слияния
Затем делаем изменения в этих файлах слияния (убираем <<<< HEAD и подобное,
оставляем только новый код, старый удаляем)

Затем:
$ git add <file1> <file2>
$ git commit -m "merged and resolved the conflicts in files"

Запускаем и делаем `git status`, он рекомендует писать `git rebase --continue`
Но это не помогает, надо `git rebase --skip` и затем уже `git push -f`


--- git push --force
История коммитов на удаленном сервере будет принудительно перезаписана вашей
собственной локальной историей. Очень важно НЕ использовать этот инструмент
необдуманно, ведь при "каких-то" волшебных обстоятельствах, можно потерять
коммиты других вкладчиков в проект.


--- git revert
Отмена публичного коммита:
$ git revert a72ef02 --no-commit
$ git status
И затем можно изменять существующий коммит, а после сделать `git push`
(без --force) и создастся новый коммит (а редактируемый коммит останется в
истории), это намного лучше, чем делать принудительную перезапись истории.


--- git cherry-pick
$ git checkout <branch>
$ git cherry-pick 96e058414f8bd24cb9d6841a6a833342c92b5bf8
$ git push


--- HEAD
Это указатель, который указывает на текущую ветку.


--- Личный серверный git
Нужно иметь удаленный сервер с ssh доступом, не забыть пробросить ключи.
На сервере нужно создать git пользователя, в домашней директории создать ~/projects

Там создать репозиторий:
$ mkdir source
$ git init
$ touch script.sh
$ git add . && git commit -m 'initial commit'
$ git config --bool core.bare true

Команда `git status` не будет работать на сервере (работа только на клиентах)
fatal: this operation must be run in a work tree.

На клиенте:
$ git clone git@server-ip:path-to-project/


--- git status и русские файлы
Добавить `quotepath = false` в секцию [core] файла `.git/config`
для нормального отображения русских символов.


--- upstream
Процесс форка это, в сущности, создание собственного репозитория (Б) на основе
существующего (А) с целью добавить к продукту какие-то собственные изменения.

Так вот (Б) это форк, а (А) это upstream

Создатель форка может быть никак не связан с создателями проекта, и обычно может
вносить изменения в форк, но не в upstream. В upstream может только предлагать.

Поддержкой upstream же занимаются мэйнтейнеры (сопровождающие) проекта. Их
версия является "канонической", и все изменения, которые они принимают, обычно в
конечном счёте попадают в форки, которые от них зависят. В этом смысле они "выше
по течению": те изменения, что они принимают, "растекаются вниз" по форкам.
Отсюда и название.

В целом, эти термины характеризуют определённый вид отношений между двумя
репозиториями. Это необязательно должны быть два серверных репозитория. Эти
термины применимы и к ситуации, когда у вас есть локальный клон репозитория с
сервера. Репозиторий на сервере это upstream, а у вас, в некотором смысле, форк.


--- Долгое клонирование
Linux ядро клонируется очень долго, можно избежать и клонировать только последние коммиты:
$ git clone --depth 1 --branch master git@github.com:iikrllx/linux.git


--- Права доступа файлов
Git не сохраняет права доступа. Если на директории установлено 700, после
клонирования все равно будет 755. Поэтому с правами можно не заморачиваться.


--- Merge Request и Pull Request
Pull Request (относится к Open Source продуктам, на открытой платформе типа GitHub).
Я вот тут ваш продукт усовершенствовал, заберите-ка то, чего я наделал.

Merge Request (внутри компании, на закрытой платформе типа GitLab).
Я вот сделал правки, хочу свою ветку залить к вам в основную (master/main).


--- GitHub vs Bitbucket vs GitLab
Все это +- одно и тоже, но есть небольшие различия.

GitHub - open source инструмент, есть так же закрытые репозитории, но в основном
стал популярен из-за open source проектов.

Bitbucket - очень редко используется для open source, и часто для закрытых
проектов, используется разными закрытыми компаниями вместе с Jira.

GitLab - тоже самое, есть CI/CD, многие компании берут его и разворачивает у
себя в локальной сети для закрытого использования

Процесс разработки программного обеспечения:
GitHub: Code -> Review
GitLab: Code -> Review -> Build -> Test -> Plan
Bitbucket: Code -> Review -> Build -> Test -> Plan


--- Github traffic
В метрики трафика включены собственные посещения. Посетители - это общее
количество посещений репозитория. Уникальные посетители - это количество
отдельных пользователей, посетивших репозиторий, и они учитываются только один
раз (не повторяются), независимо от того, сколько раз они посещали репозиторий.
Клонеры - это люди, которые клонировали или скачали копию кода с GitHub.


--- README, оформление, источники
Отличный шаблон/стандарт: https://gist.github.com/PurpleBooth/109311bb0361f32d87a2

Общее:
* Обзор продукта, содержит иллюстрации и гифки;
* Документация;
* Статический анализ кода;
* Уточняющие инструкции;
* Хорошо описанная инструкция к установке;
* Логотип;

Как минимум README должен содержать общее описание по следующим пунктам:
* Назначение библиотеки (проекта, инструмента, фреймворка)
* Системные требования (версия языка, требования к ресурсам, системные
  зависимости, нужные расширения)
* Шаги по установке, сборке, запуску
* Примеры использования или ссылки на документацию (например Wiki)

Так же в README можно использовать различные красивые модельки, например:
https://shields.io/ Это очень хорошо разряжает скучный и серый текст.

Часто встречающиеся файлы, желательно их наличие в проектах:
.gitignore, README, LICENSE/COPYING, ChangeLog/CHANGES, CONTRIBUTING, INSTALL,
AUTHORS, SECURITY. Можно к этим файлам внести .md формат.

В файле CONTRIBUTING объясните людям, как они могут получить в будущем лучшее
представление о том, что будет или не будет принято, до того, как они начнут
работу.

Файл SECURITY.md используется для описания политики безопасности в проекте или
репозитории на GitHub. Этот файл обычно содержит информацию о том, как сообщать
об уязвимостях в проекте, какие шаги предпринимаются для обеспечения
безопасности кода и данных, а также какие меры принимаются для защиты
пользователей и их информации.

Общее правило: код - который генерируется в процессе разработки, тестирования,
сборки/компиляции, рантайма - должен находиться в .gitignore.

Немного про Issues:
В Issues находятся не только баги, а еще и нововведения, тесты, помощь и т.д и т.п.

Немного про DEMO:
Можно написать свой главный README.md профиля, представиться всему миру,
прикрепить статистику, codewars и т.д. Описать свои взгляды, инструменты
и всякое такое.

Здесь можно описать свои проекты, создать good-first-issue, привлечь внимание к
проектам/идеям:
https://goodfirstissues.com/
https://goodfirstissue.dev/
https://www.reddit.com/


--- git format-patch
Можно создать патч из последнего коммита:
$ git format-patch -1

Из последних трех коммитов:
$ git format-patch -3

Получается очень удобный формат для распространения патчей.


--- Аббревиатуры, комментарии пользователей
PTAL (Please Take A Look) - просит обратить внимание, оставить комментарий,
принять MR/PL.

LGTM (Looks Good To Me) - одобрение, согласие

WIP (Work In Progress) - указывает, что работа над MR/PL ещё не завершена.

NIT (Nitpick) - применяется для указания на несущественные замечания или
предложения по улучшению кода, которые не являются обязательными для
исправления.

FYI (For Your Information) - используется, чтобы предоставить информацию без
необходимости немедленного действия. Обычно применяется, чтобы держать команду в
курсе изменений или решений.

RFC (Request For Comments) - используется, чтобы попросить мнения или
предложения по MR/PL или конкретному решению. Это приглашение к обсуждению,
особенно если есть сомнения в выборе подхода.


--- Максимальный размер файла/репозитория на GitHub
GitHub рекомендует, чтобы размер отдельных файлов в репозитории не превышал 50
МБ. Если файл больше этого размера, вы получите предупреждение. Для оптимальной
производительности желательно, чтобы весь репозиторий был меньше 1-5 ГБ. Это
помогает поддерживать высокую скорость и эффективность работы с репозиториями на
платформе. На других платформах GitLab, Bitbucket +- тоже самое.

Если вам нужно хранить более крупные файлы, можно использовать
Git Large File Storage (Git LFS), который имеет отдельные ограничения и квоты.


--- git-lfs
Установка:
$ apt-get install -y git-lfs

Инициализация Git LFS в репозитории:
$ git lfs install

Отследить тяжелый файл с помощью Git LFS (например, result.gif превышает 50 МБ):
$ git lfs track "result.gif"

Это создаст или обновит файл .gitattributes с информацией о том, что result.gif
должен управляться через LFS.

Затем добавить изменения в Git:
$ git add .gitattributes result.gif
$ git commit -m "Add result.gif with Git LFS"

Отправить изменения:
$ git push

Важно понимать, что у Git LFS тоже есть лимит. В бесплатном тарифе пользователь
получает 1 ГБ. Повышение = деньги.


--- Создание пустых веток
$ git checkout --orphan latest
$ git rm -rf .
$ git commit --allow-empty -m "Initial empty commit"
$ git push origin latest


--- git push origin master и git push --set-upstream master
- Отправляет изменения из локальной ветки `master` в удаленный репозиторий
  `origin` в ветку `master`.
- Используется для передачи изменений на удаленный сервер.

$ git push origin master

- Устанавливает локальную ветку `master` для отслеживания удаленной ветки
  `master` в `origin`.
- После выполнения этой команды можно будет просто использовать `git push` без
  указания удаленной ветки и репозитория, так как они будут заданы по
  умолчанию.

$ git push --set-upstream origin master

Для каждой ветки можно установить upstream. После этого, когда вы
переключаетесь на любую из этих веток, `git push` будет автоматически знать,
куда передавать изменения, благодаря установленной связи.
