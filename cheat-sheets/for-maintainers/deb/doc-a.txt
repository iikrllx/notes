Темы:
* Репозиторий
* Подпись
* Получение исходного пакета
* Описание исходного пакета
* Структура deb пакета
* Зависимости
* Виртуальные пакеты
* Метапакеты
* Где собирать исходники
* fakeroot
* Создание бинарного пакета (дебианизация)


--- Репозиторий
Репозиторий - это место, где хранятся и поддерживаются какие-то данные. Если рассматривать
конкретно к Debian, то репозиторий - это файловый сервер, который хранит у себя пакеты для установки
на операционную систему. Это могут быть как пакеты программ, так и обновления для сервера в виде
новых ядер, системных утилит и т.д. Существует репозитории не только для ОС, но и для программ, там
могут хранится скомпилированные и готовые к установке пакеты, так и исходные коды ПО. Помимо
официальных репозиториев, есть сторонние, которые поддерживают производители программ либо
энтузиасты. Нужно внимательно относится к сторонним репозиториям, не добавлять их бездумно (там
может быть любое ПО).

Репозиторий в sources.list имеет структуру:

deb http://site.example.com/debian distribution component1 component2 component3
deb-src http://site.example.com/debian distribution component1 component2 component3

apt знает как обращаться с http, ftp, file (локальные файлы, напр., каталог, содержащий
смонтированную ФС ISO9660), может быть еще и ssh

* deb
  бинарные пакеты (deb)

* deb-src
  пакеты с исходным кодом (deb-src)

* http://site.example.com/debian
  url репозитория

* distribution
  псевдоним релиза, ключевое слово, либо класс релиза (stable, old и т.д)

* component
  main, contrib или non-free набор пакетов, находятся в pool/

Классы релиза, типы репозиториев Debian:
* oldstable             # старый поддерживаемый stable
* stable                # используется на производстве
* testing               # только для тестовых целей, переходит в stable
* unstable (sid)        # самое свежее, но непротестированное ПО
* experimental          # пакеты и утилиты, которые только разрабатываются (alpha)
* stretch               # 9 debian
* buster                # 10 debian
* bullseye              # 11 debian
* bookworm              # 12 debian

Есть так называемые Security updates, отдельные репозитории в которые попадают только обновления
безопасности и ничего другого. Обновление сюда попадают максимально быстро после выпуска
исправлений.

* main
  эти пакеты считаются частью дистрибутива Debian, им не требуются какие-то
  дополнительные пакеты / зависимости из contrib или non-free.

* contrib
  этим пакетам (зависимостям) могут потребоваться доп.ПО, которое может
  быть в других источниках, например non-free, то есть может потребоваться несвободное ПО.

* non-free
  содержит все остальное ПО (несвободное - несоответствует принципа СПО).

* non-free-firmware
  несвободные прошивки, которые доступны по умолчанию.
  хранятся драйверы и другие компоненты, которые содержат закрытый исходный код или несвободные лицензии.

Можно создать локальный репозиторий, он будет использоваться только на данном ПК, собирать пакеты,
класть в этот локальный репозиторий с другими, и прописывать их в sources.list и делать установку от
туда.


--- Подпись
Для обеспечения безопасности пользователей репозитории должны подписываться ключами шифрования.
Чтобы гарантировать, что установка пакетов ПО производится из надежного источника. Владельцы
репозиториев, подписав его своим закрытым ключом, выкладывают в общий доступ соответствующий
открытый ключ для этого репозитория. Открытый ключ необходим для добавления удалённого подписанного
репозитория, это контролируется средствами СУП (apt). Если ставить пакеты из НЕ подписанного
репозитория, там может быть абсолютно любое ПО, в том числе злоумышленников и хакеров. При импорте
ключа, будет запрос к серверу ключей, на котором хранится закрытая часть ключа. Нужно поставить
'dirmngr' перед запросом ключей. Иногда может появится ошибка, что ключ устарел (его поменяли) и
нужно добавить новый, а иногда просто NO_PUBKEY (означает, что нужно просто добавить ключ).

Запрос:
$ gpg --keyserver pgp.mit.edu --recv ${KEY}

Добавление в систему:
$ gpg --export ${KEY} | sudo apt-key add -

Коротко:
$ apt-key adv --keyserver pgp.mit.edu --recv-keys ${KEY}


--- Получение исходного пакета
В /etc/apt/sources.list должен быть тип архива deb-src

$ apt-get source <pack>     # скачать исходники
$ dpkg-checkbuilddeps       # проверяет наличие неустановленных Build-Depends из debian/control
$ apt-get build-dep <pack>  # установка Build-Depends зависимостей из debian/control
$ apt-cache showsrc <pack>  # так можно посмотреть Build-Depends

Например, изменили что-то в исходниках, затем нужно:
$ dch                                  # изменения в changelog
$ dpkg-source --commit                 # создание нового патча
$ dpkg-source --before-build .         # применить патчи
$ dpkg-buildpackage -rfakeroot -b -uc  # сборка пакета

Но нужно быть аккуратным, при сборке могут непроходить некоторые тесты, поэтому после изменений
исходников, нужно подправить и другие компоненты (тесты) Или можно просто добавить DEB_BUILD_OPTIONS.


--- Описание исходного пакета
pack-version.dsc                 # source package
                                 # описание пакета + суммы исходных архивов,
                                 # данный файл подписан (подлинный)

pack-version.debian.tar.gz       # source package
                                 # содержимое debian/ директории

pack-version.orig.tar.gz         # original source package
                                 # содержимое исходных текстов, src, tests, libs и другие

pack-version*.changes            # содержит информацию о версии пакета, изменениях, которые были
                                 # внесены в данной сборке, и другие метаданные о пакете.
                                 # люди, загружающие пакет, могут посмотреть этот файл
                                 # и сразу понять, что было изменено.

The pack-version.dsc and pack-version*.changes files must be signed using the `debsign`
command with your private GPG key in the ~/.gnupg/ directory, before uploading them to the Debian
FTP archive. The GPG signature provides the proof that these files are really yours, using your
public GPG key.

* Управляющие файлы пакета: control файл, скрипты и файлы подсистемы debian

debian/rules                     # Makefile осуществляет сборку пакета
                                 # сценарий сопровождающего для сборки пакета

debian/control                   # текстовый файл (описание)

Каждый пакет и каждые исходники, хранят в себе файл control. В самом .deb пакете этот файл хранится
в архиве control.tar.gz. В исходниках, хранится в debian/control. Базы apt и dpkg хранятся в этом же
формате.

debian/changelog                 # изменения в проекте

debian/format                    # формат пакета, современный формат 3.0
                                 # 3.0 (native) - для родных Debian пакетов
                                 # 3.0 (quilt) - для остальных пакетов

				 # для 3.0 (quilt) изменения записываются в виде серии заплат quilt
                                 # в каталог debian/patches

При использовании старого формата пакета с исходным кодом 1.0 создавался один большой файл diff.gz,
который содержал файлы сопровождения в debian и заплаты к исходному коду. Такой пакет немного
громоздок для проверки и понимания каждого изменения дерева исходного кода. Это не так уж хорошо.
В новом формате 3.0 (quilt) заплаты хранятся в файлах debian/patches/* для создания которых
применяется команда quilt.

debian/compat                    # версия debhelper

Файл debian/compat используется в пакетировании для Debian и его производных (например, Ubuntu) с
целью указания версии инструментария debhelper, который будет использоваться при сборке пакета.
Содержимое файла debian/compat обычно представляет собой одно число, которое указывает версию
debhelper, с которой пакет совместим. Например, если файл содержит число 11, это означает, что
пакет использует 11-ю версию debhelper.

В более новых версиях debhelper (начиная с версии 12), вместо использования файла debian/compat,
рекомендуется указывать совместимость в файле debian/control с помощью поля Build-Depends и
переменной debhelper-compat. Например: Build-Depends: debhelper-compat (= 12)

debian/watch                     # оригинальный адрес с исходниками, нужен для uscan

Файл debian/watch используется для автоматического обновления и загрузки новых версий пакетов из
исходных архивов. Он содержит информацию о местоположении, формате и правилах для поиска обновлений
пакетов. Формат файла debian/watch может различаться в зависимости от используемого инструмента для
обновления пакетов. В данном файле можно увидеть что-то подобное: version=4 (это версия формата uscan).

uscan - это инструмент, который используется для автоматического поиска и загрузки новых версий
пакетов на основе информации из файла debian/watch.

$ uscan --no-download
$ uscan --verbose
$ uscan

После выполнения данной команды, скачается архив с актуальной версией пакета (только архив с
исходниками), можно его распаковать, скопировать debian/ директорию из прошлого архива, и дополнить
новыми данными:
$ dch -v <new-version> "New upstream release."
$ dpkg-buildpackage -b -uc

После сборки пакета появятся файлы:
<package>.dsc
<package>_source.changes
и т.д ...

debian/conffiles                 # конфигурационные файлы пакета

Файл debian/conffiles используется для указания конфигурационных файлов пакета. При обновлении
пакета система управления пакетами (например, dpkg) будет обрабатывать эти файлы особым образом,
чтобы избежать перезаписи пользовательских настроек. Содержимое debian/conffiles — это список
путей к конфигурационным файлам, один путь на строку.

Когда пакет обновляется, если конфигурационные файлы были изменены пользователем, dpkg предложит
несколько вариантов: сохранить пользовательские изменения, заменить файлы новыми версиями из пакета,
или попытаться объединить изменения.

debian/<pack>.dirs               # директории пакета

Файл debian/dirs используется для указания директорий, которые должны быть созданы при установке
пакета. В этом файле перечисляются пути к каталогам, которые должны быть созданы в файловой системе
при установке пакета. Это полезно, если пакет требует наличия определенных директорий для корректной
работы. Например, Makefile может закончится ошибкой, если не существует нужных директорий.

debian/*cron.*                   # cron задачи-скрипты пакета

Эти файлы будут скопированы в соответствующие каталоги /etc/cron.d/, /etc/cron.daily/,
/etc/cron.hourly/, /etc/cron.monthly/, или /etc/cron.weekly/ при установке пакета. Таким
образом, задания cron автоматически добавляются в систему при установке пакета.

debian/<pack>.doc-base           # документация отличная от man/info

Если пакет исползует документацию другого формата, необходимо пользоваться этим файлом. Обычно к
таким файлам относятся файлы в форматах HTML, PS и PDF, помещаемые в /usr/share/doc/имя_пакета/.

debian/<pack>.docs               # файлы документации пакета

Содержит список файлов документации, которые должны быть установлены вместе с пакетом. Это могут
быть README-файлы, руководства и другие документы, которые будут помещены в стандартные директории
документации /usr/share/doc/<pack>/.

debian/<pack>.init               # init пакета

Файл debian/<pack>.init используется для определения init-скрипта, который будет управлять запуском
и остановкой сервиса. Этот скрипт будет установлен в /etc/init.d/ и использован для управления
сервисом через стандартные команды (`start`, `stop`, `restart` и т.д.).

debian/<pack>.default            # /etc/default пакета

Файл debian/<pack>.default используется для установки значений по умолчанию для переменных
окружения, которые могут использоваться init-скриптом. Этот файл обычно копируется в /etc/default/ и
содержит переменные и их значения, которые могут быть изменены пользователем для настройки поведения
сервиса.

debian/<pack>.install            # установка ПО пакета

Файл debian/<pack>.install используется для указания файлов и директорий, которые должны быть
установлены в определенные места в файловой системе при установке пакета. В этом файле указываются
исходные файлы и целевые директории, куда они должны быть скопированы. Это позволяет точно
контролировать, какие файлы куда попадут при установке пакета.

debian/<pack>.links              # символические ссылки пакета

Файл debian/<pack>.links используется для создания символических ссылок (symlinks) при установке
пакета. В этом файле указываются исходные файлы и ссылки, которые должны быть созданы. Например,
можно указать, что нужно создать символическую ссылку из `/usr/bin/foo` в `/usr/local/bin/foo`.

debian/lintian-overrides         # отменить предупреждения lintian

Этот файл используется для подавления определённых предупреждений и ошибок, которые могут быть
сгенерированы утилитой Lintian. Lintian анализирует пакеты Debian на наличие различных проблем и
несоответствий стандартам. Если вы считаете, что какое-то предупреждение или ошибка Lintian не
актуальны для вашего пакета, вы можете добавить их в этот файл, чтобы они не отображались при
проверке.

debian/lintian-profile           # настройка lintian

Этот файл используется для настройки профилей Lintian, инструмента для проверки пакетов Debian на
соответствие стандартам Debian Policy и обнаружение потенциальных проблем. В этом файле можно
указать, какие проверки Lintian следует выполнить или пропустить для конкретного пакета. Настройка
профиля Lintian позволяет управлять выводом и уровнем предупреждений, которые генерирует Lintian при
проверке пакета, и сделать проверку более гибкой и настраиваемой для конкретных потребностей и
требований проекта.

debian/<pack>.symbols            # для shlibs

Этот файл используется для отслеживания изменений в символах (функциях, переменных и т. д.) в
библиотеках, которые могут повлиять на совместимость между версиями пакетов. Этот файл помогает
автоматизировать процесс обновления пакетов, позволяя сборочной системе Debian узнать, какие символы
были добавлены, изменены или удалены в новой версии пакета. Это позволяет избежать ошибок и
конфликтов при обновлении пакетов и обеспечивает совместимость между различными версиями пакетов.

debian/source/local-options      # это настройки для личного использования
debian/source/options            # для всех

Содержит общие настройки для процесса сборки пакета. Эти настройки применяются ко всем сборкам
пакета, независимо от того, на какой машине они выполняются. В нем можно указать, например, какие
файлы включать или исключать из сборки.

* Немного про скрипты

В директории debian/ могут быть и скрипты (конфигурации), скриптами не стоит злоупотреблять
и они должны отрабатывать так, чтобы целостность системы не нарушалась при повтороном запуске.
dh_make создает хороший шаблон данных скриптов, лучше следовать ему и не усложнять.
Не беспокойте пользователя меню debconf, вызываемым из сценариев сопровождающего для обновления.
Сценарии сопровождающего являются сильной стороной Debian, из-за них люди выбирают Debian. Нужно
быть очень осторожны, чтобы не превратить их в источник раздражения.

debian/<pack>.preinst       # выполняется перед установкой пакета (install)
debian/<pack>.postinst      # выполняется сразу после установки пакета (install)
debian/<pack>.prerm         # выполняется перед удалением пакета (rm) (зачистка)
debian/<pack>.postrm        # выполняется после удаления пакета (rm)

* Дополнительные файлы пакета (появляются после сборки)

debian/<pack>/DEBIAN/conffiles  # список конфигурационных файлов пакета, абсолютные пути
debian/<pack>/DEBIAN/md5sums    # список MD5 сумм файлов пакета по одному файлу на строчку
debian/<pack>/DEBIAN/shlibs     # список разделяемых библиотек (shared)

Важно понимать, что директория DEBIAN имеет как бы сторону ФС и там можно увидеть usr/bin и
подобное.


--- Структура deb пакета
Скачанные из сети файлы помещаются на диск в каталог /var/cache/apt/archives
Если удалить из /var/cache/apt/archives/<pack> и заново установить пакет,
он будет скачиваться из сети по новой, если же наоборот, будет обращение к кэшу,
чтобы сэкономить ресурсы.

Файлы документации, changelog и подобного есть в /usr/share/doc/<pack>

Двоичный пакет deb - это обычный ar архив, состоит он из:
$ ar t <pack.deb>

debian-binary   # текстовый файл, содержит версию deb-пакета, 3.0 современный формат
control.tar.gz  # архив с управляющей информацией (control, conffiles, md5sums) и скрипты
                # это  называется мета-информация
data.tar.gz     # архив, содержащий дерево устанавливаемых файлов пакета
                # (исходники, документация, файлы, либы ..)
                # если этот архив разархивировать в корень системы, программа как бы установится
                # все файлы программы будут по своим местам

Мета-информация - это не только файлы пакета для установки, это так же описание отношений с другими
пакетами в системе Debian. Информация о другой информации.

Пакеты Debian — это не единственный формат пакетов, используемый в мире свободного ПО.
Основным конкурентом является формат RPM из дистрибутива Red Hat Linux и его многочисленных производных.
Red Hat — очень популярный коммерческий дистрибутив (конкурент Debian). Не стоит использовать rpm пакеты
в Debian, если только использовать вместе с alien.


--- Зависимости
Бинарные пакеты могут для свой корректной работы требовать наличия других, отсутствия других,
а также рекомендовать к установке другие пакеты, вместе с которыми данные будут обеспечивать большую
функциональность. Все эти поля хранит файл debian/control.

Зависимости бинарного пакета:
Depends      # Пакет не будет установлен до тех пор, пока перечисленные пакеты не будут установлены.

Переменные вида:
${misc:Depends} ${perl:Depends} ${shlibs:Depends}

Значения этих переменных можно посмотреть: открыть бинарный пакет с помощью mc, там будут эти Depends.
Эти переменные заполняются автоматически при использовании соответствующих утилит в процессе сборки
пакета, что облегчает задачу сборщика пакета и гарантирует корректное разрешение зависимостей при
установке пакета на системе. Таким образом, сборщик пакета не должен вручную управлять
зависимостями, если используются утилиты dh_shlibdeps, dh_perl и dh_gencontrol. Эти утилиты
вызываются во время сборки пакета с помощью debhelper, но так же их можно использовать отдельно от
сборки.

${misc:Depends}:
Эта переменная используется для включения зависимостей, которые требуются для корректной установки и
удаления пакета. Обычно это различные скрипты и утилиты, которые могут быть необходимы для работы
пакета. Значения этой переменной автоматически определяются инструментами сборки Debian.

${shlibs:Depends}: Это переменная для зависимостей от общих библиотек. Она заполняется автоматически
списком библиотек, которые требуются для работы вашего бинарного пакета. Например, если ваш пакет
зависит от `libc6, libgtk-3-0 и других библиотек, то dpkg-shlibdeps (часть инструментария
dpkg-dev) добавит эти зависимости в поле Depends.

${perl:Depends}:
Эта переменная используется для зависимостей пакета, написанного на Perl. Она автоматически
заполняется инструментами сборки и используется для включения зависимостей от различных модулей Perl.

Pre-Depends  # Эти зависимости дополняют 'Depends' зависимости.

Recommends   # Указывает на пакеты, которые рекомендуется устанавливать вместе с данным пакетом, но
             # это не обязательно.

Suggests     # Указывает на пакеты, которые могут быть полезны при использовании данного пакета, но
             # не обязательны для его работы.

Conflicts    # Указывает пакеты, вместе с которыми данный пакет работать НЕ может.

Replaces     # Указывает пакеты, файлы которых модифицируются этим пакетом.
             # Требуется в случае создания патча, изменяющего что-либо.

Provides     # Указывает на виртуальные пакеты, которые предоставляются данным пакетом и могут
             # использоваться другими пакетами как зависимости.
             # Пакеты Apache / Nginx предоставляют возможность демона httpd (виртуальный пакет).
             # А у mc есть Provides: mcedit (виртуальный пакет).

Зависимости сборки:
Build-Depends, Build-Conflicts
Эти зависимости должны быть удовлетворены в тот момент, когда debian/rules данного пакета
вызывается с параметрами: build, binary, binary-arch, build-arch, build-indep и binary-indep

Формат всех этих полей одинаков. Он представляет собой список имён пакетов, разделённых запятыми.


--- Виртуальные пакеты
Это просто алиасы для основного пакета, например mc и mcedit. mc - это основной пакет где содержится
вся функциональность (mc и mcedit), а mcedit это всего лишь алиас для mc. Это сделано для удобства
пользователей, которые могут устанавливать mcedit вместо mc, если им нужен только текстовый
редактор, а не весь файловый менеджер. Таким образом, пользователи могут установить только то, что
им нужно, не устанавливая все компоненты пакета mc.


--- Метапакеты
Существуют пустые пакеты, в которых описаны только зависимости и метаданные (документация и т.д).
Они обеспечивают установку группы взаимосвязанных программ. В описании можно увидеть.
Section: metapackages (но это необязательно). Например, пакет 'build-essential' является метапакетом.
В таких пакетах нет исходников и подобного, а есть только debian/ директория с описанием.
Такие пакеты существуют лишь ради эффектов, которые их метаданные оказывают на стек работы с пакетами.

Пакет build-essential в Debian является метапакетом. Он предоставляет необходимые инструменты для
сборки пакетов в Debian, включая компиляторы, библиотеки и другие инструменты, но сам по себе не
содержит какого-либо программного кода. Он лишь указывает на другие пакеты, которые необходимы для
сборки программ в Debian. Вся суть этого пакета в Depends: и метаданных.

$ mkdir pack-1.0 && cd pack-1.0
$ equivs-control control    # появится control
$ vim control               # изменить под метапакет
$ equivs-build control      # соберет метапакет

еще примеры:
$ equivs-control debian     # появится debian/
$ equivs-build debian       # соберет метапакет


--- Где собирать исходники
Чтобы собрать пакет правильно, его необходимо собирать в минимальной системе, где стоят только
build-essential и зависимости этого пакета. Тогда не будет никаких накладок из-за того, что в
системе стоят некоторые пакеты вообще неизвестно откуда и непонятно каких версий, для этого лучше
использовать chroot (debootstrap / pbuilder)


--- fakeroot
Процесс создания пакета является простым сбором в архив набора существующих файлов. Собирать пакет
от имени root не нужно! (это риск). Можно использовать утилиту fakeroot и передать ей программу,
которая будет обманута (мол она запущена от имени root). Это настолько удобно, что dpkg-buildpackage
имеет встроенную функциональность fakeroot. Процесс будет выполняться от обычного пользователя, а не root.


--- Создание бинарного пакета (дебианизация)
Есть некая программа в исходных кодах (tarball - архив), необходимо создать для него набор,
пригодный для сборки пакета deb. Этот процесс называется дебианизацией программы. Для того чтобы
дебианизировать программу, нужно в дереве ее исходников создать каталог debian/ и положить туда
файлы.

$ mkdir -p <package>-<version>/src
$ cd <package>-<version>/src
$ touch hello.c; cd-          # прописать вывод hello
$ dh_make --native            # создаст родной debian/
                              # редактируем debian/ файлы, удаляем ненужные
$ dpkg-source -b .            # создать архивы (исходники) и мета

Если случайно удалили какие то файлы из debian/
$ dh_make --addmissing

В корне пакета, создать Makefile:
src/hello: src/hello.c
	gcc -g3 -O0 -o src/hello src/hello.c

install: src/hello
	install -D src/hello $(DESTDIR)/usr/bin/hello

DESTDIR имеет полный путь к папке:
/home/builder/binout-1.0/debian/binout
и нужный бинарный файл, будет положен в usr/bin/

Структура:
<package>-<version>/
<package>-<version>/Makefile
<package>-<version>/debian/
<package>-<version>/src/
<package>-<version>/src/hello.c

$ debuild -uc -us

Получаем на выходе:
helloworld_0.0.1_amd64.build    # build log file
helloworld_0.0.1_amd64.changes  # changelog and checksums
helloworld_0.0.1_amd64.deb      # binary package (двоичный пакет)
helloworld_0.0.1.dsc            # source package (debian source control)
helloworld_0.0.1.tar.gz         # original source directory

Описание dh_make:
Создает пакет, который предназначен для использования на одной конкретной архитектуре и не должен
быть переносимым на другие архитектуры: $ dh_make --native

Создает пакет, который является одиночным бинарным пакетом, который будет установлен на одном
компьютере: $ dh_make --single

Создает пакет, который является библиотекой (shared library), которая может быть использована
другими программами: $ dh_make --library

Создает архитектурно-независимый пакет, который может быть использован на различных архитектурах и
не зависит от конкретной архитектуры: $ dh_make --indep

dephelper представляет собой набор сценариев, эти сценарии вызываются из debian/rules
Все команды, входящие в него, начинаются с префикса dh_
dh_make создает файлы, а dephelper использует эти сформированные файлы.

Можно еще использовать:
$ dh_make --copyright gpl3
Команда dh_make создает шаблонный каталог для создания пакета Debian. Опция --copyright gpl3
указывает, что лицензия для пакета будет GNU General Public License version 3 (GPL-3).

Создаст подкаталог debian со множеством файлов.
Обязательные файлы: rules, control, changelog, copyright
Файлы .ex служат примерами, их можно удалить или изменить.

Эти файлы необходимо изменить под наш пакет
rules это Makefile, набор правил, используемых для конфигурирования, сборки и установки:
target: source1 source2 ...
        command1
        command2

Если один из файлов source* новее, чем файл target, то цель должна быть создана
с помощью command1 command2
