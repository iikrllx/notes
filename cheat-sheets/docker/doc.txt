Docker - это инструмент для создания, развертывания и управления изолированными
контейнерами приложений. Он используется для упрощения процесса разработки,
тестирования и развертывания приложений, обеспечивая согласованную среду на
любой платформе.

Docker позволяет упаковать приложение и все его зависимости в контейнер, который
может быть легко перенесен на любую систему, поддерживающую Docker, без
необходимости настройки окружения. Это обеспечивает более быстрое и надежное
развертывание приложений, а также упрощает совместную работу и масштабирование.

Разработчик может настроить проект на своем ПК и затем передать проект клиенту.
У клиента может не работать проект, потому что может быть разное окружение для
проекта, версии программ, зависимости и т.д. А Docker решает эту проблему.

Можно воспользоваться готовым контейнерами и пощупать какую-то новую технологию.

Image (образ) - это шаблон, который содержит файловую систему и все необходимые
инструкции для создания и запуска контейнера. Образы создаются с помощью
Dockerfile, который описывает, как должен выглядеть и работать контейнер.
Образы хранятся в реестре Docker и могут быть скачаны и использованы для
создания новых контейнеров. Например, минималистичный образ Ubuntu, или образ с
настроенным NoSQL, busybox и т.д. Контейнер создается после каждого запуска
run (даже если уже есть контейнер, это как бы снимок). Без контейнера образ
запустить не получится.

Container (контейнер) в Docker - это запущенный экземпляр образа. Контейнеры
создаются из образов с помощью команды `docker run` и представляют собой
изолированные процессы, которые работают на хост-системе. Контейнеры могут быть
запущены, остановлены, перемещены и удалены. Контейнеры используют файловую
систему и ресурсы образа, но также могут иметь свои собственные изменения
в файловой системе и состоянии, которые не влияют на исходный образ.

$ docker run hello-world              # контейнер выполнится и сразу же завершится
$ docker run -it --name Java openjdk  # запустить контейнер + указать имя, и войти в него
$ docker run -it <ID>                 # запустить и войти
$ docker run --help                   # помощь по команде run

$ docker info                         # общая информация
$ docker images                       # все локальные образы
$ docker search <image>               # поиск образа на Docker Hub
$ docker ps                           # контейнеры
$ docker ps -a                        # все контейнеры
$ docker start <ID>                   # запустить контейнер
$ docker stop <ID>                    # остановить контейнер
$ docker pause <ID>                   # пауза контейнера
$ docker unpause <ID>                 # снять с паузы
$ docker restart <ID>                 # перезагрузить контейнер
$ docker kill <ID>                    # прерывает, убивает контейнер

$ docker build <PATH>                 # запустить образ с Dockerfile
$ docker-compose build <PATH>         # запустить docker-compose.yml
$ docker-compose up                   # запускает все сервисы

$ docker pull openjdk                 # скачать образ openjdk или обновить
$ docker pull openjdk:latest          # скачать последнюю версию openjdk
$ docker pull openjdk:11              # скачать 11 версию openjdk

$ docker search busybox               # поиск необходимого образа busybox
$ docker search kali                  # поиск необходимого образа kali linux

Чтобы поделиться своими контейнерами нужно зарегистрироваться на Hub, а затем
войти с терминала.

$ docker push <NAME>                  # выкладывает на Hub
$ docker login                        # для Hub, отправки своих Docker окружений
$ docker logout                       # выход

$ docker rmi <ID>                     # удалить образ
$ docker rm <ID>                      # удалить контейнер
$ docker container prune              # удалить все контейнеры

Все эти команды взаимодействуют с Docker daemon.
docker pull -> Docker daemon -> Registry (Hub готовых образов) -> скачивает.

Можно настроить контейнер Ubuntu с различными инструментами, например C++, Nginx
и т.д. Сохранить его, передать другому человеку, и все будет работать корректно.

С помощью docker-compose.yml можно подключить несколько образов (настроек,
сервисов) для контейнера. Например, php и mariadb. Порты в этих файлах
указываются только при работе в веб-приложениями. Еще можно подключить mysql и
т.д и т.п. Или Например, Ubuntu с php и nginx. docker-compose.yml может
подключать Dockerfile.

Стандартное поведение docker, это стирать какие-то внутренние операции,
настройки, запускать контейнер заново, чистым. Чтобы сохранять свои конфигурации
можно использовать Docker Volumes.

Как развернуть Debian контейнер:
$ docker run -it debian

Подключиться с другого pts к текущему контейнеру:
$ docker ps # узнать идентификатор
$ docker exec -it <ID> /bin/bash

В docker/example/* лишь пример развертывания приложения в образе. А еще можно
разворачивать в образах целые операционные системы. Создать базовый образ
операционной системы, который затем можно будет использовать для запуска
различных контейнеров. Например, указать в Dockerfile так:
...
FROM debian
...

И затем собрать образ операционной системы:
$ docker build -t my-debian-image .

А затем запустить его в контейнере:
$ docker run -it my-debian-image
