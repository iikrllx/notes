Темы:
* Подпись пакета (общая информация)
* Как подписать пакет
* Разбор команды gpg --list-keys
* Как выложить пакет на mentors.debian.org (dput)
* apt-rdepends


--- Подпись пакета (общая информация)
`debsign` используется для подписания Debian пакета с помощью GPG (GNU Privacy
Guard). Подписание пакета является важной частью процесса создания и выпуска
пакетов, так как оно подтверждает подлинность и целостность пакета. Вот
несколько ключевых моментов, когда следует использовать `debsign`:

1. Перед выпуском пакета в архив: Это один из основных случаев, когда нужно
использовать `debsign`. Перед тем как отправить пакет в официальный архив
Debian или в какое-либо другое хранилище пакетов, необходимо подписать его,
чтобы другие пользователи могли убедиться в его подлинности.

2. Когда вы распространяете пакет через другие каналы: Если вы распространяете
пакет через сторонние репозитории, веб-сайты или другие каналы, также
рекомендуется подписывать его. Это помогает пользователям убедиться, что пакет
действительно был создан вами и не был изменен.

3. При внутреннем использовании: Если вы разрабатываете пакеты для внутреннего
использования в компании или организации, также стоит подписывать их. Это
обеспечивает дополнительный уровень безопасности и уверенность в том, что пакеты
не были изменены с момента их создания.

Подписание пакета с помощью `debsign` обычно выполняется на этапе завершения
сборки пакета, после того как вы создали все необходимые файлы (.dsc, .changes,
.deb и т.д.). Команда `debsign` подписывает файлы `.dsc` и `.changes`, добавляя
цифровую подпись, которая затем может быть проверена с помощью GPG.

Пример использования `debsign`:
$ debsign пакет_1.0-1_amd64.changes
Подпишет `.changes` и `.dsc`.

Таким образом, подписание пакета с помощью `debsign` является важным шагом в
процессе создания и распространения Debian пакетов, обеспечивая их подлинность и
целостность.

Если вы изменили пакет, включая его содержимое или исходные файлы, вам нужно
подписать пакет своей подписью. (!!!)


--- Как подписать пакет
GPG это инструмент по-умолчанию для Debian пакетов. Другие лучше не
использовать.

Создать новый ключ:
$ gpg --full-generate-key
Ответы по-умолчанию, но длина должна быть максимальной.

Вывести все ключи:
$ gpg --list-keys

Подписать пакет:
$ debsign <file>.changes

Проверка подписи:
$ gpg --verify <file>.changes
$ gpg --verify <file>.dsc

Также можно открыть подписанные файлы `.dsc` и `.changes` в текстовом редакторе
и убедиться, что в них присутствует блок `BEGIN PGP SIGNATURE` в конце файла.
Этот блок содержит саму подпись.


--- Разбор команды gpg --list-keys
Вывод:

/home/<user>/.gnupg/pubring.kbx
-----------------------------
pub   rsa4096 2024-11-28 [SC]
      ABCDEF1234567890FEDCBA0987654321ABCDEF12
uid           [ultimate] Ivan Ivanov <example@gmail.com>
sub   rsa4096 2024-11-28 [E]

Разбор:

1. Хранятся публичные ключи: /home/<user>/.gnupg/pubring.kbx

2. Здесь описан публичный ключ, алгоритм ключа, дату окончания действия ключа:
pub   rsa4096 2024-11-28 [SC]
      ABCDEF1234567890FEDCBA0987654321ABCDEF12

Это отпечаток (fingerprint) ключа, который используется для его уникальной
идентификации. ABCDEF1234567890FEDCBA0987654321ABCDEF12

3. uid [ultimate] Ivan Ivanod <example@gmail.com>: это идентификатор
пользователя, связанный с ключом. Он содержит уровень доверия
('ultimate' означает, что вы полностью доверяете этому ключу),
имя владельца и его адрес электронной почты.

4. Подчиненный ключ.

`key-id` обычно состоит из последних 8 символов длинного ключа (`fingerprint`).
В данном случае вот: ABCDEF12


--- Как выложить пакет на mentors.debian.org (dput)
`dput` — это утилита, используемая для загрузки пакетов в репозитории Debian или
Ubuntu. Она особенно полезна для разработчиков, которые хотят поделиться своими
программами или библиотеками в формате пакетов Debian (.deb) через официальные
или персональные репозитории.

1. Перед загрузкой пакета, нужно в `debian/changelog` исправить:
UNRELEASED -> unstable

2. Подписать свой пакет с помощью `debsign`.

3. Настроить ~/.dput.cf
[mentors]
fqdn = mentors.debian.net
incoming = /upload
method = https
allow_unsigned_uploads = 0
progress_indicator = 2
# Allow uploads for UNRELEASED packages
allowed_distributions = .*

4. Выполнить:
$ dput mentors <file>.changes

Чтобы выложить новую версию пакета, нужно выполнить:
$ dch
и поднять версию, затем повторить те же действия.


--- apt-rdepends
Работа с Depends пакета.
$ apt-get install -y apt-rdepends

Вывести все зависимости пакета:
$ apt-rdepends <package>

Отобразить пакеты, которые зависят от указанного пакета (обратные зависимости):
$ apt-rdepends -r <package>

Показывает статусы зависимостей (установлен/не установлен):
$ apt-rdepends -p <package>

Увидеть все зависимости пакета в виде графика:
$ apt-rdepends -d <package>
