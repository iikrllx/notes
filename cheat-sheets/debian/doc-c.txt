Темы:
* Команды GPG
* Как выглядят ключи
* Зачем нужны ключи и подписи
* Зачем инженеры делятся своими GPG отпечатками (fingerprint)
* Подпись пакета (общая информация)
* Как создать ключ и подписать пакет
* Разбор команды `gpg --list-keys`
* Как выложить пакет на mentors.debian.org (dput)
* apt-rdepends
* Транзитивные зависимости
* pristine-tar
* BTS (submit@bugs.debian.org)
* BTS (0000000@bugs.debian.org)
* Шаблон письма при отправке патчей/изменений
* Процесс загрузки пакета в архив
* Разбор Debian ссылок
* Что такое Copyright
* Что такое Copyleft
* debian/changelog и Closes
* Проверка целостности пакета (debsums)
* Проверка целостности пакета (dscverify)
* md5sum
* Немного Best Practices
* git-buildpackage (gbp)
* Библиотеки (soname)
* dev пакеты


--- Команды GPG
Создать новый ключ:
$ gpg --full-generate-key
Ответы по-умолчанию, но длина должна быть максимальной.

Список публичных ключей:
$ gpg --list-keys

Просмотр отпечатка всех публичных ключей:
$ gpg --fingerprint

Список приватных ключей:
$ gpg --list-secret-keys

Проверка подписи файлов:
$ gpg --verify <file>.changes
$ gpg --verify <file>.dsc

Изменение доверия к ключу (trust):
$ gpg --edit-key "example@gmail.com"

Экспортировать публичный ключ:
$ gpg --export -a "example@gmail.com" > public_key.asc
$ gpg --export --armor <KEY_ID> > public_key.asc

`--armor` делает формат ключа более ASCII читабельным, а не бинарным.

Экспортировать приватный ключ:
$ gpg --export-secret-keys -a "example@gmail.com" > private_key.asc

Посмотреть все подписи публичного ключа:
$ gpg --list-sigs <KEY_ID>

Когда другие инженеры или участники сообщества подписывают ваш публичный ключ,
это означает, что они проверили вашу личность и доверяют, что ключ действительно
принадлежит вам. Это помогает создать "сеть доверия", где каждый может быть
уверен в подлинности и надежности ключей, используемых для шифрования и
подписывания данных.

Подписать файл/письмо:
$ gpg --clearsign message.txt

Появится файл `message.txt.asc`, который содержит ваше письмо и подпись.

Проверка подлинности: Подтверждает, что письмо действительно отправлено вами.
Целостность: Гарантирует, что содержимое письма не было изменено после его
отправки. Доверие: Помогает получателям убедиться в вашей идентичности, особенно
если ваш ключ подписан третьими лицами. Подпись электронных писем с помощью PGP
делает общение более безопасным и заслуживающим доверия.

Отдельная подпись для файла:
$ gpg --detach-sign --armor -o signature.asc text
$ gpg --verify signature.asc text # Good signature

Удалить публичный ключ:
$ gpg --delete-key <pub>

Импортирует указанный публичный ключ:
$ gpg --keyserver keyserver.ubuntu.com --recv-keys <KEY_ID>

Ищет публичный ключ по адресу:
$ gpg --keyserver keyserver.ubuntu.com --search-keys <example@gmail.com>

Как проверить целостность ПО, и то что ПО оригинальное, например разработчик
выложил:
vifm-0.14-beta.tar.bz2 # исходники
vifm-0.14-beta.tar.bz2.asc # подпись ключа
# публичный ключ необходимо скачать с сайта ПО
$ gpg --import public_key.asc
$ gpg --verify vifm-0.14-beta.tar.bz2.asc vifm-0.14-beta.tar.bz2


--- Как выглядят ключи
Так начинается публичный ключ:
-----BEGIN PGP PUBLIC KEY BLOCK-----

Так начинается приватный ключ:
-----BEGIN PGP PRIVATE KEY BLOCK-----

Так начинается подпись:
-----BEGIN PGP SIGNATURE-----


--- Зачем нужны ключи и подписи
Debian использует инфраструктуру открытых ключей (PKI) для обеспечения
безопасности и доверия в сообществе. GPG-ключи позволяют подписывать пакеты и
электронные письма, удостоверяя, что они действительно от вас. Подписи от других
участников Debian помогают подтвердить вашу личность и укрепить доверие к вашему
ключу. PGP-подпись — это криптографическая подпись, которая используется для
подтверждения подлинности и целостности данных.

Отправитель использует свой приватный ключ для создания цифровой подписи на
основе данных, которые он хочет подписать (например, файлы или сообщения).
Подпись гарантирует, что данные не были изменены после подписания, так как любая
модификация данных приведет к изменению хеша. Она также подтверждает, что данные
были отправлены владельцем приватного ключа, так как только он может создать
такую подпись. PGP-подпись обеспечивает аутентификацию источника и целостность
данных, что особенно важно для распространения программного обеспечения и других
важных файлов.

Можно добавить свой публичный ключ на: `keyserver.ubuntu.com`
И собирать подписи различных инженеров. Это поможет продемонстрировать доверие к
вашему ключу в Debian проекте.


--- Зачем инженеры делятся своими GPG отпечатками (fingerprint)
1234 5678 90AB CDEF 1234  5678 90AB CDEF 1234 5678
Это последовательность из 40 символов (в шестнадцатеричном формате), это
называется еще fingerprint публичного ключа. Отпечаток позволяет другим людям
загрузить и убедиться, что они используют правильный публичный ключ для
шифрования сообщений или проверки подписей.

Если кто-то хочет отправить вам зашифрованное сообщение, они могут использовать
ваш публичный ключ. Предоставив отпечаток, вы помогаете другим найти и скачать
ваш ключ из публичных серверов ключей.

Просмотр отпечатка всех публичных ключей:
$ gpg --fingerprint


--- Подпись пакета (общая информация)
`debsign` используется для подписания Debian пакета с помощью GPG (GNU Privacy
Guard). Подписание пакета является важной частью процесса создания и выпуска
пакетов, так как оно подтверждает подлинность и целостность пакета. Вот
несколько ключевых моментов, когда следует использовать `debsign`:

1. Перед выпуском пакета в архив: Это один из основных случаев, когда нужно
использовать `debsign`. Перед тем как отправить пакет в официальный архив
Debian или в какое-либо другое хранилище пакетов, необходимо подписать его,
чтобы другие пользователи могли убедиться в его подлинности.

2. Когда вы распространяете пакет через другие каналы: Если вы распространяете
пакет через сторонние репозитории, веб-сайты или другие каналы, также
рекомендуется подписывать его. Это помогает пользователям убедиться, что пакет
действительно был создан вами и не был изменен.

3. При внутреннем использовании: Если вы разрабатываете пакеты для внутреннего
использования в компании или организации, также стоит подписывать их. Это
обеспечивает дополнительный уровень безопасности и уверенность в том, что пакеты
не были изменены с момента их создания.

Подписание пакета с помощью `debsign` обычно выполняется на этапе завершения
сборки пакета, после того как вы создали все необходимые файлы (.dsc, .changes,
.deb и т.д.). Команда `debsign` подписывает файлы `.dsc` и `.changes`, добавляя
цифровую подпись, которая затем может быть проверена с помощью GPG.

Пример использования `debsign`:
$ debsign пакет_1.0-1_amd64.changes
Подпишет `.changes` и `.dsc`.

Таким образом, подписание пакета с помощью `debsign` является важным шагом в
процессе создания и распространения Debian пакетов, обеспечивая их подлинность и
целостность.

Если вы изменили пакет, включая его содержимое или исходные файлы, вам нужно
подписать пакет своей подписью. (!!!)


--- Как создать ключ и подписать пакет
GPG это инструмент по-умолчанию для Debian пакетов. Другие лучше не
использовать.

Создать новый ключ:
$ gpg --full-generate-key
Ответы по-умолчанию, но длина должна быть максимальной.

Список публичных ключей:
$ gpg --list-keys

Подписать пакет:
$ debsign <file>.changes

Проверка подписи:
$ gpg --verify <file>.changes
$ gpg --verify <file>.dsc

Также можно открыть подписанные файлы `.dsc` и `.changes` в текстовом редакторе
и убедиться, что в них присутствует блок `BEGIN PGP SIGNATURE` в конце файла.
Этот блок содержит саму подпись.


--- Разбор команды `gpg --list-keys`
Вывод:

/home/<user>/.gnupg/pubring.kbx
-----------------------------
pub   rsa4096 2024-11-28 [SC]
      ABCDEF1234567890FEDCBA0987654321ABCDEF12
uid           [ultimate] Ivan Ivanov <example@gmail.com>
sub   rsa4096 2024-11-28 [E]

Разбор:

1. Хранятся публичные ключи: /home/<user>/.gnupg/pubring.kbx

2. Здесь описан публичный ключ, алгоритм ключа, дату окончания действия ключа:
pub   rsa4096 2024-11-28 [SC]
      ABCDEF1234567890FEDCBA0987654321ABCDEF12

Это отпечаток (fingerprint) ключа, который используется для его уникальной
идентификации. ABCDEF1234567890FEDCBA0987654321ABCDEF12

3. uid [ultimate] Ivan Ivanov <example@gmail.com>: это идентификатор
пользователя, связанный с ключом. Он содержит уровень доверия
('ultimate' означает, что вы полностью доверяете этому ключу),
имя владельца и его адрес электронной почты.

4. Подчиненный ключ.

`key-id` обычно состоит из последних 8 символов длинного ключа (`fingerprint`).
В данном случае вот: ABCDEF12


--- Как выложить пакет на mentors.debian.org (dput)
`dput` — это утилита, используемая для загрузки пакетов в репозитории Debian или
Ubuntu. Она особенно полезна для разработчиков, которые хотят поделиться своими
программами или библиотеками в формате пакетов Debian (.deb) через официальные
или персональные репозитории.

1. Перед загрузкой пакета, нужно в `debian/changelog` исправить:
UNRELEASED -> unstable

2. Подписать свой пакет с помощью `debsign`.

3. Настроить ~/.dput.cf
[mentors]
fqdn = mentors.debian.net
incoming = /upload
method = https
allow_unsigned_uploads = 0
progress_indicator = 2
# Allow uploads for UNRELEASED packages
allowed_distributions = .*

4. Выполнить:
$ dput mentors <file>.changes

Чтобы выложить новую версию пакета, нужно выполнить:
$ dch
и поднять версию, затем повторить те же действия.


--- apt-rdepends
Работа с Depends пакета.
$ apt-get install -y apt-rdepends

Вывести все зависимости пакета:
$ apt-rdepends <package>

Отобразить пакеты, которые зависят от указанного пакета (обратные зависимости):
$ apt-rdepends -r <package>

Показывает статусы зависимостей (установлен/не установлен):
$ apt-rdepends -p <package>

Вывести все зависимости пакета в виде графа:
$ apt-rdepends -d <package>

Вывести сборочные зависимости пакета:
$ apt-rdepends -b <package>


--- Транзитивные зависимости
Это зависимости, которые возникают не напрямую от пакета, который вы
устанавливаете, а от его зависимостей. Проще говоря, это зависимости
зависимостей.

Например, предположим, что есть пакет A, который зависит от пакета B,
и пакет B, в свою очередь, зависит от пакета C. В этом случае:

- Пакет B является прямой зависимостью пакета A.
- Пакет C является транзитивной зависимостью пакета A, потому что он необходим
  для работы пакета B, который, в свою очередь, необходим для работы пакета A.

Когда вы используете `apt-rdepends`, чтобы увидеть зависимости пакета, он
покажет вам как прямые, так и транзитивные зависимости, предоставляя полное
дерево зависимостей для данного пакета. Это особенно полезно для понимания
полной цепочки зависимостей, которые будут установлены вместе с целевым пакетом.


--- pristine-tar
pristine-tar - это утилита, используемая в системах управления пакетами,
особенно в контексте Debian, для восстановления точной копии оригинального
архива исходного кода, как он был загружен от поставщика. Она позволяет
разработчикам хранить только дельты к исходному коду в системе контроля версий,
а не сам архив, что экономит место и упрощает управление изменениями. При
необходимости, `pristine-tar` может воссоздать оригинальный архив с точностью
до байта.

Выводит список всех архивов, для которых в репозитории доступны метаданные
`pristine-tar`. Это помогает увидеть, какие оригинальные архивы можно
воссоздать с помощью утилиты:

$ pristine-tar list

Создает commit в системе контроля версий с необходимыми метаданными, чтобы
в будущем можно было воссоздать точную копию указанного архива
`<package>_<version>.orig.tar.bz2`. Метаданные будут добавлены в ветку
`upstream/latest`:

$ pristine-tar commit ../<package>_<version>.orig.tar.bz2 upstream/latest

Генерирует .delta файл, который содержит информацию о различиях между архивом и
его восстановленной версией. Это дельта-файл используется для восстановления
точной копии оригинального архива:

$ pristine-tar gendelta ../<package>_<version>.orig.tar.bz2 <package>_<version>.orig.tar.bz2.delta

Чтобы восстановить архив, надо перейти в директорию в которой лежит .delta файл
и выполнить:

$ pristine-tar checkout ../<package>_<version>.orig.tar.bz2
Создаст/восстановит -> ../<package>_<version>.orig.tar.bz2


--- BTS (submit@bugs.debian.org)
Можно не использовать утилиту `reporbug`, а написать письмом на прямую.
Например, если нужно создать новый тикет в системе BTS
(Debian Bug Tracking System <submit@bugs.debian.org>)

Допустим RFP:

Package: wnpp
Severity: wishlist

Package name: <name>
Version: <version>

и т.д.


--- BTS (0000000@bugs.debian.org)
Кому: 1092159@bugs.debian.org
Тема: #1092159
Control: retitle -1 ITP: libxfce4windowing -- windowing library
Control: owner -1 Kirill Rekhov <krekhov.dev@gmail.com>

В системе отслеживания ошибок Debian (BTS) с помощью команд Control можно
вносить изменения в тикеты. Например, команда `retitle` позволяет изменять
заголовок тикета. Это небольшой пример.

Если надо закрыть баг, например:
Кому: 1092159-done@bugs.debian.org
Тема: #1092159
Closing this RFP: this package is already in sid.


--- Шаблон письма при отправке патчей/изменений
Мне нравится этот шаблон.

Subject: [PATCH] Updates and Improvements to the '<package>' package.

<suite>: <package>: <version>

Dear Maintainer, sorry for bothering you.
I hope this message finds you well.

...

Thank you!


--- Процесс загрузки пакета в архив
Здесь описан короткий план действий, подробнее смотреть`--- DAK` и
`--- Как выложить пакет на mentors.debian.org (dput)`.

1. Подготовка пакета: Вы вносите необходимые изменения в пакет, включая
обновление changelog, и проверяете, что все работает корректно.

2. Загрузка на Salsa: Вы загружаете изменения в репозиторий на Salsa и
убеждаетесь, что все в порядке.

3. Загрузка в Debian: Чтобы пакет попал в архив Debian, его нужно загрузить с
помощью утилиты `dput` или `dupload`. Эти утилиты отправляют пакет на сервер
загрузки Debian (например, ftp-master.debian.org).

4. Процесс проверки: После загрузки пакет проходит автоматические проверки.
Если он соответствует всем требованиям, он будет принят и добавлен в архив
unstable.

5. Информация о загрузке: Вы получите уведомление о статусе загрузки — успешная
она или отклонена с указанием причин.

(!!!) Загрузка пакетов в архив Debian требует определенных привилегий и прав,
которые есть у Debian Maintainers (DM) и Debian Developers (DD).

(!!!) Если у вас нет непосредственного доступа для загрузки пакета в архив.
Debian через права DD или DM, вы можете использовать систему mentors.debian.net.
Это платформа, где вы можете представить свой пакет для проверки и поиска
спонсора, который сможет загрузить его в архив от вашего имени.


--- Разбор Debian ссылок
* https://archive.debian.org/:

- Этот архив содержит устаревшие версии Debian и пакеты, которые больше не
  поддерживаются официально.

- Используется для доступа к старым версиям Debian и их репозиториям, которые
  были удалены из основных серверов из-за прекращения поддержки.

- Полезен, если вам нужно работать с историческими версиями Debian или
  восстановить старую систему.

* https://ftp.debian.org/debian/:

- Адрес http://deb.debian.org/debian из sources.list - это
  https://ftp.debian.org/debian/

- Это основной сервер для официальных и поддерживаемых версий Debian.

- Здесь находятся актуальные версии пакетов и репозитории, на которые вы,
  вероятно, будете ссылаться для установки или обновления программ на
  действующих системах Debian.

- Поддерживается и обновляется сообществом Debian.

* https://ftp-master.debian.org/:

Это сайт, связанный с инфраструктурой Debian, который обслуживает разработчиков
и администраторов пакетов. Он содержит информацию о текущем состоянии архивов,
таких как статус сборки пакетов и различные инструменты для управления
репозиториями. Это не обычный репозиторий для загрузки пакетов пользователями,
а часть внутренней логистики и управления пакетами в проекте Debian.

Например, здесь: https://ftp-master.debian.org/new.html можно увидеть очередь
пакетов, которые проверяются перед добавленим в Debian архив.


--- Что такое Copyright
# Copyright © Kirill Rekhov <krekhov.dev@gmail.com>, 2024-2025.

Это уведомление указывает на то, что Кирилл Рехов обладает авторским правом на
произведение, СОЗДАННОЕ в период с 2024 по 2025 год. Это важно для юридического
признания авторства и защиты прав на произведение. Срок действия авторских прав
не ограничивается датами, указанными в уведомлении.  Эти даты обычно указывают,
когда произведение было создано или обновлено.

Строка с Copyright помогает идентифицировать автора или владельца кода. Это
важно для признания заслуг разработчика и может быть значимо в случае споров о
происхождении кода. Это так называемое авторское право.


--- Что такое Copyleft
Это концепция лицензирования, которая позволяет распространять копии и
модифицированные версии произведения при условии, что те же права сохраняются
для всех последующих пользователей.

Основная цель Copyleft — поддержка открытого и свободного использования
программного обеспечения, обеспечивая, чтобы все производные работы оставались
также свободными.

Если вы изменяете или добавляете что-то к GPL-коду и затем распространяете эту
модифицированную версию, вы обязаны сделать это под лицензией GPL и предоставить
исходный код.


--- debian/changelog и Closes
Например, в `debian/changelog` указано:
* New maintainer (Closes: #1088857)

Это приведёт к автоматическому закрытию указанного баг-репорта, когда пакет
будет принят в основной архив Debian. Это происходит на этапе, когда пакет
проходит через систему управления багами Debian (BTS) и загружается в архив.
BTS автоматически отслеживает такие записи в changelog и закрывает
соответствующие отчёты о багах.


--- Проверка целостности пакета (debsums)
Инструмент `debsums` вычисляет суммы установленных файлов и сверяет их с
`md5sums` из пакетов, таким образом проверяется целостность файлов, были ли они
измененны или нет.

Проверка всех установленных пакетов:
$ debsums

Проверка конкретного пакета:
$ debsums <package>

Показать только измененные пакеты:
$ debsums -s


--- Проверка целостности пакета (dscverify)
Контрольные суммы в файлах `.changes` и `.dsc` нужны для проверки целостности и
подлинности файлов. Чтобы использовать `dscverify` для проверки исходных пакетов
и их подписей.

$ dscverify package.dsc
$ dscverify package.changes

Принцип работы тот же: `dscverify` вычисляет контрольные суммы фактических
файлов, упомянутых в `.dsc`, и сравнивает их с теми, что записаны в `.dsc`. Если
контрольные суммы не совпадают, это указывает на то, что файлы были изменены или
повреждены.

`dscverify` использует GPG для проверки криптографической подписи файла. Это
включает проверку того, что файл был подписан доверенным ключом. Для этого
утилита сравнивает подпись в `.dsc` или `.changes` файле с открытым ключом,
который должен быть в вашем ключевом кольце GPG.


--- md5sum
Утилита `md5sum` используется для вычисления и проверки MD5-хешей файлов.
MD5-хеш представляет собой 32-символьную строку, которая является уникальным
представлением содержимого файла.

Вычисление MD5-хеша для файла:
$ md5sum filename.txt

Эта команда выведет MD5-хеш для `filename.txt`, который вы можете использовать
для проверки целостности файла в будущем.

Создать checksums.md5 файл:
$ md5sum file1.txt file2.txt > checksums.md5

Проверить в будущем суммы файлов (целостность):
$ md5sum -c checksums.md5

Вычисление MD5-хеша для строки (используя стандартный ввод):
$ echo "Hello, World!" | md5sum

MD5-сумма (или MD5-хеш) файла генерируется с использованием криптографического
хеш-функции MD5:

1. Чтение файла: Все данные файла читаются.

2. Хеш-функция MD5: Данные разбиваются на блоки по 512 бит и обрабатываются с
   помощью серии математических операций.

3. Дополнение: Последний блок дополняется и содержит длину исходных данных.

4. Вывод: Вычисляется 128-битный хеш, который преобразуется в 32-символьную
   строку в шестнадцатеричном формате.


--- Немного Best Practices
Описание пакета должно быть написано для среднего пользователя, который будет
использовать и получать пользу от пакета. Например, пакеты для разработчиков
могут быть техническими, а более универсальные приложения, такие как текстовые
редакторы, должны быть понятны менее технически подкованным пользователям.

Наш обзор показал, что большинство описаний пакетов слишком технические и не
подходят для обычных пользователей. Если пакет не предназначен исключительно
для технических пользователей, это проблема.

Как писать для нетехнических пользователей? Избегайте жаргона. Не упоминайте
другие приложения или фреймворки, с которыми пользователь может быть не знаком.
Например, GNOME или KDE можно упоминать, а вот GTK — вероятно, нет. Не
предполагайте наличие каких-то знаний у пользователя. Если нужно использовать
технические термины, объясните их.

Будьте объективны. Описание пакета — не место для продвижения вашего продукта,
каким бы замечательным он ни был. Помните, что читателю могут быть неинтересны
те же вещи, что и вам.

Ссылайтесь на другие пакеты, протоколы, стандарты и спецификации в их
канонической форме, если такая существует.

Записи в журнале изменений. Сосредоточьтесь на описании значительных и заметных
для пользователей изменений с момента последней версии.

Сконцентрируйтесь на том, что было изменено — кто, как и когда обычно менее
важно. Однако не забудьте вежливо упомянуть людей, которые оказали значительную
помощь в создании пакета, например, тех, кто отправил патчи.

Нет необходимости подробно описывать тривиальные и очевидные изменения. Можно
объединить несколько изменений в одну запись. С другой стороны, не стоит быть
слишком кратким, если вы внесли значительные изменения. Будьте особенно ясны,
если изменения влияют на поведение программы. Для дальнейших объяснений
используйте файл README.Debian.

Избегайте сокращений, технического жаргона, особенно при объяснении изменений,
которые закрывают баги, особенно если баги были поданы пользователями, которые
не кажутся технически подкованными. Будьте вежливы, не ругайтесь.

Иногда желательно префиксировать записи журнала изменений именами изменённых
файлов. Однако нет необходимости перечислять каждый изменённый файл, особенно
если изменения были небольшими или повторяющимися. Можно использовать
подстановочные знаки.

Команда по выпуску версий указала, что большинство загрузок в unstable должны
использовать `urgency=medium`. То есть, вы должны выбирать `urgency=medium`,
если нет особых причин, по которым загрузка должна быстрее или медленнее перейти
в testing. Например, можно выбрать `urgency=low`, если изменения с момента
последней загрузки значительны и могут вызвать непредвиденные проблемы.

`urgency=high` используется, если нужно, чтобы изменения быстрее перешли в
testing из-за каких-либо срочных исправлений или критических обновлений.
`urgency=low` выбирают, если изменения значительны и могут вызвать неожиданные
проблемы, поэтому их переход следует замедлить.

Когда вы хотите сообщить информацию о багах, нет необходимости загружать пакет,
чтобы передать это. Вместо этого используйте систему отслеживания ошибок (BTS).
Если в отчете не объясняется, почему это не является багом, это может вызвать
путаницу.

Если баг был исправлен давно, но вы забыли его закрыть, просто закройте его в
BTS без изменения changelog, предполагая, что описание исправления уже там есть.
Это также относится к исправлениям, сделанным авторами или мейнтейнерами
исходного кода; вам не нужно отслеживать баги, которые они исправили давно,
в вашем changelog.

* Fixed a memory leak in the initialization process. Closes: #54321

Здесь описывается, что именно было исправлено, и указывается номер закрытого бага.

* New upstream release.
  - Fixed crash on startup. Closes: #12345
  - Improved performance of the rendering engine. Closes: #12346, #15432

В этом случае указывается, что выпущена новая версия с исправлениями,
и перечисляются конкретные изменения с номерами багов.

* Improved error handling in the network module.
* Updated translations for French and German.
* Fixed issue with file permissions. Closes: #56789

Здесь описаны общие улучшения и одно конкретное исправление с указанием номера бага.

* Moved configuration files to /etc/newpath/. Please update your settings accordingly.

В этом примере сообщается о перемещении конфигурационных файлов, что важно для
пользователей.

architecture-independent package (_all.deb)

Когда у программы есть большой объем данных, не зависящих от архитектуры
(например, аудиофайлы, иконки, обои или другие графические файлы), стоит
подумать о разделении этих данных на отдельный пакет, если их размер значителен
по сравнению с остальной частью пакета. Это позволяет избежать ненужного
дублирования одних и тех же данных в нескольких .deb-файлах для каждой
архитектуры. Хотя это добавляет небольшой накладной расход на файлы Packages,
это экономит много места на зеркалах Debian. Кроме того, отделение данных, не
зависящих от архитектуры, снижает время обработки lintian при проверке всего
архива Debian.

Depends: libfoo (= ${binary:Version})

Это условие зависимости, которое указывает, что версия `libfoo` должна точно
соответствовать версии вашего пакета.

${binary:Version}
Это переменная, используемая в системе сборки Debian, которая автоматически
подставляется текущей версией пакета, который вы собираете. Таким образом, это
гарантирует, что пакет будет зависеть именно от той версии `libfoo`, которая
соответствует версии основного пакета.

Желательно, чтобы `debian/copyright` соответствовала лицензии проекта:

Files: *
Copyright: 2016-2025 Karl Yngve Lervåg <karl.yngve@gmail.com>
License: Expat

Files: debian/*
Copyright: 2025 Kirill Rekhov <krekhov.dev@gmail.com>
License: Expat

Коммит релиза (`debian/changelog` изменения) должен быть отдельным и
соответствовать тегу debian/... После коммита можно использовать:
$ gbp tag # автоматически подписывает тег

Как обновить `upstream/latest` ветку, если есть новый релиз, автоматически,
сделает коммит и тег:
$ gbp import-orig --uscan --upstream-branch=upstream/latest

Начать новый релиз, добавить все описанные коммиты в `debian/changelog`:
$ gbp dch -R
$ gbp tag  # создать тег
$ gbp push # отправляет коммиты и теги

Репозиторий должен содержать только начальную ревизию -1 (и соответствующий ей
тег релиза). Загрузка исходного кода (ревизия -2) происходит после того, как
пакет был принят из NEW (поскольку это необходимо для его тестирования).

Пакеты должны называться в честь библиотек, например:
Package: libcbwayland1
Section: libs
Architecture: any
Multi-Arch: same
Depends: ${misc:Depends}, ${shlibs:Depends}
Description: Shared Library libcbwayland1
 Shared Library libcbwayland1 is a component of the Clipboard application,
 providing essential functionalities for managing clipboard operations in
 Wayland environments. This library ensures compatibility and performance
 optimization for Wayland-based systems, enabling efficient clipboard data
 exchange and synchronization within the Clipboard application.


--- git-buildpackage (gbp)
Файл `debian/gbp.conf` используется для настройки поведения `git-buildpackage`
(GBP), инструмента, который помогает автоматизировать сборку Debian пакетов из
Git репозиториев. Он задает параметры, такие как ветки для сборки, команды для
выполнения после сборки, и другие опции, влияющие на процесс сборки и управления
пакетами.

Пример файла:
[DEFAULT]
debian-branch=debian/unstable
upstream-branch=upstream/latest
postbuild = lintian $GBP_CHANGES_FILE
pristine-tar = False
sign-tags=True

[DEFAULT]: Это секция конфигурации по умолчанию, которая применяется ко всем
командам `git-buildpackage`, если не указано иное.

debian-branch=debian/unstable: ветка в Git, которая содержит файлы и изменения,
специфичные для Debian.

upstream-branch=upstream/latest: Указывает ветку, содержащую исходный код от
разработчиков, без специфических для Debian изменений.

postbuild = lintian $GBP_CHANGES_FILE: Это команда, которая выполняется после
сборки пакета.

pristine-tar = False: Указывает, что не будет использоваться `pristine-tar`.
`pristine-tar` обычно используется для воссоздания точных копий исходных архивов
tar из информации, хранящейся в Git.

sign-tags=True: Указывает, что теги в Git должны подписываться GPG-подписью. Это
добавляет уровень безопасности и позволяет удостовериться в подлинности тегов.

Как использовать?
$ git clone https://github.com/vimwiki/vimwiki -b v2024.01.24 # остановиться на определенном теге
$ cd vimwiki
$ git checkout -b debian/latest
$ git checkout -b upstream/latest
$ gbp import-orig ~/Downloads/vimwiki-2024.01.24.tar.gz --debian-branch=debian/latest --upstream-branch=upstream/latest --sign-tags
$ git checkout -b debian/latest # добавить `debian/*` файлы вместе с `debian/gbp.conf`
$ gbp buildpackage # благодаря `debian/gbp.conf` сборка будет контролироваться

`gbp buildpackage` (Git Build Package) строит пакеты прямо на текущей системе,
используя установленное окружение и зависимости. Это означает, что он использует
существующую систему и зависимости, которые должны быть уже установлены на
машине.


--- Библиотеки (soname)
$ ls -l libFLAC.so*
lrwxrwxrwx libFLAC.so -> libFLAC.so.12.0.0
lrwxrwxrwx libFLAC.so.12 -> libFLAC.so.12.0.0
-rw-r--r-- libFLAC.so.12.0.0
# libFLAC.so.12 это SONAME (Shared Object Name)

- `libFLAC.so` обычно является ссылкой на текущую версию библиотеки,
   используемую для компиляции новых приложений. Это может указывать на другую
   ссылку или непосредственно на файл библиотеки.

- `libFLAC.so.12` это символическая ссылка, указывающая на конкретный файл
   версии библиотеки (`libFLAC.so.12.0.0`), и она соответствует SONAME, чтобы
   гарантировать совместимость.

- `libFLAC.so.12.0.0` — это фактический файл библиотеки. Это конкретная версия
   библиотеки, которая используется как реальная реализация.

Зачем это нужно:

- Совместимость: Программы, которые используют библиотеку, могут продолжать
работать, даже если библиотека обновляется, до тех пор, пока сохраняется
совместимость SONAME.

- Удобство обновления: При выпуске новой версии библиотеки достаточно
изменить символические ссылки, чтобы переключиться на новую версию, не
изменяя программы, которые с ней работают.

- Упрощение разработки: При компиляции новых программ указывается
`libFLAC.so`, что упрощает процесс, так как эта ссылка всегда указывает на
актуальную версию библиотеки для компиляции.

Таким образом, такая система ссылок облегчает управление версиями библиотек
и поддерживает стабильность и совместимость программного обеспечения.


--- dev пакеты
dev пакеты содержат файлы, необходимые для разработки программного обеспечения,
использующего определенные библиотеки. Обычно они включают:

Заголовочные файлы (.h): Необходимы для компиляции программы с использованием
библиотеки.

Символические ссылки: Указывают на версии библиотек, которые нужны для
компиляции (например, libFLAC.so).

Файлы конфигурации: Например, pkg-config файлы, которые содержат информацию о
компоновке библиотек.

-dev пакеты предназначены для использования в разработке и позволяют
компилировать код с использованием соответствующих библиотек.
Эти пакеты можно использовать в своем коде для разработки приложений.

Например:
$ dpkg-deb -c clipboard-dev_0.10.0-1_amd64.deb
drwxr-xr-x root/root         0 2025-02-19 16:34 ./
drwxr-xr-x root/root         0 2025-02-19 16:34 ./usr/
drwxr-xr-x root/root         0 2025-02-19 16:34 ./usr/lib/
drwxr-xr-x root/root         0 2025-02-19 16:34 ./usr/lib/x86_64-linux-gnu/
drwxr-xr-x root/root         0 2025-02-19 16:34 ./usr/share/
drwxr-xr-x root/root         0 2025-02-19 16:34 ./usr/share/doc/
drwxr-xr-x root/root         0 2025-02-19 16:34 ./usr/share/doc/clipboard-dev/
-rw-r--r-- root/root       163 2025-02-19 16:34 ./usr/share/doc/clipboard-dev/changelog.Debian.gz
-rw-r--r-- root/root      5928 2025-02-19 16:34 ./usr/share/doc/clipboard-dev/copyright
lrwxrwxrwx root/root         0 2025-02-19 16:34 ./usr/lib/x86_64-linux-gnu/libcbwayland.so -> libcbwayland.so.1
lrwxrwxrwx root/root         0 2025-02-19 16:34 ./usr/lib/x86_64-linux-gnu/libcbx11.so -> libcbx11.so.1

Пакет содержит символические ссылки, такие как libcbwayland.so и libcbx11.so,
которые можно использовать при разработке своих приложений. Эти ссылки указывают
на конкретные версии библиотек, необходимые для компиляции ваших программ. Таким
образом, можно использовать эти ссылки для подключения библиотек при разработке.
