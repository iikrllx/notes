Темы:
* Общее
* Репозитории
* rinse
* mock
* yumdownloader
* specs
* noarch / x86_64 / i686
* mock vs koji
* toolset
* createrepo

RHEL дистрибутивы это Centos, Fedora.
Centos имеет последнюю версию 8, она не поддерживается,
а 7 версия поддерживается.

Debian используется больше для домашнего пользования.
А RHEL обычно используется предприятиями и крупными организациями,
которым важна коммерческая поддержка, долгосрочная стабильность
и сертификация программного обеспечения.


--- Общее
/etc/yum.repos.d/            # репозитории
/var/log/yum.log             # журнал yum
/etc/yum                     # конфигурации yum
/etc/yum.conf                # конфигурация yum
/var/cache/yum               # кэшированные данные / метаданные

$ yum list                   # все установленные и доступные к установке пакеты
$ yum list available         # список только доступных пакетов
$ yum list installed         # список только установленных пакетов
$ yum list installed bash    # rpm -qa | grep bash тоже самое
$ yum list kernel            # все пакеты ядра
$ yum list emacs*            # показывает все emacs пакеты
$ yum info <package>         # информация о пакете
$ yum deplist <package>      # зависимости пакета
$ yum provides "*stdio.h"    # поиск файла в пакете
$ yum search <package>       # поиск пакета
$ yum search all <package>   # поиск пакета
$ yum repoinfo base          # информация о репозитории
$ yum repo-pkgs base list    # информация о пакетах в указанном репозитории
$ yum repo-pkgs base install # установить все пакеты из репозитория
$ yum repo-pkgs base remove  # удалить пакеты установленные из репозитория
$ yum makecache              # обновляет метаданные пакетов в кэше (актуализация)
$ yum clean packages         # удалить пакеты сохраненные в кэше
$ yum clean all              # удалить все пакеты и метаданные
$ yum repolist               # список всех подключенных репозиториев

$ rpm -q --changelog bash    # показать changelog bash
$ rpm -e --nodeps bash       # аналог apt-get purge <package>
$ rpm -ql bash               # аналог dpkg -L
$ rpm -qf $(which scp)       # какому пакету принадлежит программа scp
$ rpm --showrc               # конфигурация rpm инструментов

Установка (не подтягивает зависимости):
$ rpm -ivh ./redis-2.8.19-1.el7.src.rpm
$ rpm -ivh ./redis-2.8.19-1.el7.rpm

Установка с зависимостями:
$ yum localinstall ./redis-2.8.19-1.el7.rpm

$ yum install <package>
$ yum install -y <package>
$ yum remove <package>
$ yum check-update           # проверка на наличие обновлений
$ yum update                 # обновление всех пакетов
$ yum update <package>       # обновить пакет
$ yum downgrade <package>    # откатить пакет
$ yum reinstall <package>    # переустановка
$ yum autoremove             # удаление ненужных пакетов

Важно указать репозитории в /etc/yum.repos.d/CentOS-Sources.repo
Скачать исходники из репозитория можно:
$ yumdownloader --source <package>

Подключить epel репозиторий:
$ yum install epel-release   # создаст /etc/yum.repos.d/epel.repo

Отключение репозитория из $ yum repolist
$ yum-config-manager --enable epel

Поставить метапакет, например:
$ yum groupinstall "Development Tools"

В CentOS также есть мета-пакеты, такие как `@Development Tools`,
которые устанавливают группу пакетов, необходимых для определенной цели,
такой как разработка программного обеспечения.


--- Репозитории
Вывод команды, пример:
$ yum info bash
Loaded plugins: fastestmirror, keys, protectbase
Loading mirror speeds from cached hostfile
 * base: mirror.docker.ru
 * extras: mirror.docker.ru
 * updates: mirror.docker.ru
0 packages excluded due to repository protections

- "Loaded plugins: fastestmirror, keys, protectbase" - это указывает на активированные
плагины yum, такие как fastestmirror, keys и protectbase.

- "Loading mirror speeds from cached hostfile" - это сообщение о том, что yum загружает
скорости зеркал из кэша файлов хоста, чтобы определить наилучшее зеркало для загрузки пакетов.

- Затем перечислены зеркала для репозиториев base, extras и updates, которые используются
для загрузки пакетов.

yum выбрал наиболее подходящее, ближайшее зеркало mirror.docker.ru
Чтобы изменить зеркало можно отредактировать /etc/yum.repos.d/CentOS-Base.repo

В этих файлах описаны репозитории:
$ ls -1 /etc/yum.repos.d/
CentOS-Base.repo           # основные репозитории
CentOS-CR.repo             # протестированные пакеты, но не вошедшие в официальный релиз
CentOS-Debuginfo.repo      # репозиторий с отладочными символами для пакетов
CentOS-Media.repo          # установочные файлы
CentOS-Sources.repo        # исходные файлы
CentOS-Vault.repo          # архивы предыдущих версий
CentOS-fasttrack.repo      # доступ к обновлениям
CentOS-x86_64-kernel.repo  # ядра для архитектуры x86_64

В файлах зеркал можно увидеть: base / extras / updates
Это репозитории разделены по логике пакетов.

base - содержит основные пакеты, которые предоставляют базовую
функциональность операционной системы.

extras - содержит дополнительные пакеты, которые не включены в
основной репозиторий, но предоставляются для удобства пользователей.

updates - содержит обновления для существующих пакетов.

epel - содержит дополнительные пакеты, не конфликтует и не переустанавливают
базовые пакеты RHEL. Самый популярный неофициальный репозиторий для CentOS.


--- mock
Для сборки пакетов используется утилита mock, она нужна для создания и тестирования
пакетов RPM в изолированной среде. Она позволяет создавать среду для сборки пакетов,
в которой отсутствуют зависимости от системы, что обеспечивает более стабильное
и предсказуемое окружение для сборки пакетов. build SRPMs in a chroot.
SRPMs (Source RPM) - исходные файлы, патчи и спецификации для сборки.

mock не работает в Debian, эта утилита работает в RHEL системах. mock похож на pbuilder

mock этапы:
* установка сборочных зависимостей
* скачивание исходных кодов пакета
* сборка и установка пакета в среду, mock использует rpmbuild
* тестирование пакета
* создание пакета из исходников

mock создает чруты для сборки в /var/lib/mock/*
/var/cache/mock хранятся использованные чруты
/etc/mock/ хранятся конфигурации чрутов

Файлы конфигурации в `/etc/mock/*.cfg` используются для настройки среды chroot, которая используется
для сборки и тестирования пакетов в CentOS. Конфигурационные файлы mock позволяют настраивать
параметры среды сборки, такие как список репозиториев, параметры сборки и другие опции,
что позволяет создавать изолированные среды для сборки пакетов.

$ mock -r epel-7-x86_64 init      # создаст чрут с репозиторием epel-7-x86_64
$ mock -r epel-7-x86_64 --clean   # удаляет выбранный чрут

alteros.cfg это конфигурация чрута
macros.txt это макросы, которые используются для управления параметрами сборки,
такими как пути к каталогам, версии, имена пакетов и другие параметры
$ mock -r ./alteros.cfg --macro-file=./macros.txt --resultdir="$resultdir" "$pac"

Собрать бинарный пакет из исходников
$ mock -r epel-7-x86_64 some_package.src.rpm

Пересборка пакета
$ mock -r epel-7-x86_64 rebuild some_package.src.rpm
например, если пакет не собрался с помощью mock (без rebuild)
можно изменить что-то в коде и сделать с rebuild, чтобы не тратить время
на новое создание окружения с нуля.

Например, mock собирает данный SRPM
gettext-0.19.8.1-3.el7.src.rpm

На выходе получаются пакеты
emacs-gettext-0.19.8.1-3.el7.alteros.noarch.rpm
gettext-0.19.8.1-3.el7.alteros.x86_64.rpm
gettext-common-devel-0.19.8.1-3.el7.alteros.noarch.rpm
gettext-devel-0.19.8.1-3.el7.alteros.x86_64.rpm
gettext-libs-0.19.8.1-3.el7.alteros.x86_64.rpm

gettext является библиотекой для работы с переводами и локализацией,
и она включает в себя различные компоненты, такие как библиотеки, заголовочные файлы
и инструменты для разработчиков. Эти пакеты взаимосвязаны и содержат различные компоненты
библиотеки gettext, которые могут быть необходимы для разработки и выполнения программ,
использующих эту библиотеку.


--- rinse
Если на хосте стоит Debian и необходимо развернуть chroot с RHEL, можно использовать
$ rinse --arch=amd64 --distribution=centos-7 --directory=/var/chroot/centos-7 \
--mirror http://centos.mirrors.proxad.net/7.9.2009//os/x86_64/Packages


--- yumdownloader
$ yumdownloader --source man-db --destdir=. --resolve
Скачать man-db со всеми зависимостями (пакетами)

$ yumdownloader man-db --resolve
Скачать пакет и зависимости

$ yum search man-db
Если пакет man-db найден, то можно скачать его исходный пакет
$ yumdownloader --source man-db

man-db-2.6.3-11.el7.src.rpm
Это исходный пакет, который содержит исходный код программы man-db,
спецификация для сборки и другие файлы, необходимые для создания бинарного пакета RPM.

gzip-1.5-11.el7_9.x86_64.rpm
Это бинарный пакет для установки

Создать ~/rpmbuild со всем необходимым
$ rpm -ivh ./man-db-2.6.3-11.el7.src.rpm
Чтобы появилась директорию ~/rpmbuild (там будут лежать все метаданные)
После установки rpm -ivh различных пакетов все их данные будут хранится в одной
директории ~/rpmbuild

Установить зависимости пакета
$ yum-builddep man-db

Затем можно начать сборку
$ cd ~/rpmbuild/SPECS
$ rpmbuild -bb <file>.spec

Есть еще:
$ rpmbuild -bb <file>.spec # создать только бинарный пакет + подпись

$ rpmbuild -bp <file>.spec # подготовка исходных файлов к сборке, применить патчи и т.д (не сборка)
                           # SPECS -> SOURCES -> BUILD

$ rpmbuild -bs <file>.spec # создает исходник + подпись
                           # Wrote: /home/builder/rpmbuild/SRPMS/man-db-2.6.3-11.el7.src.rpm

$ rpmbuild -ba <file>.spec # полная сборка всего

После успешной сборки структура будет:
BUILD        # исходные файлы пакета
BUILDROOT    # временное хранение данных при сборке
RPMS         # хранятся собранные бинарные rpm пакеты
SOURCES      # архивы исходных кодов, патчи и т.д
SPECS        # spec файлы
SRPMS        # исходные *.src.rpm пакеты

<file>.src.rpm формируется благодаря <file>.spec
А файл <file>.rpm создается после того, как <file>.src.rpm
собран в исполняемый бинарный пакет

В репозитории название RPM и SRPM могут отличаться
Binary package: emacs-mercurial-2.6.2-11.el7.x86_64.rpm
Source package: mercurial-2.6.2-11.el7.src.rpm
$ yumdownloader emacs-mercurial.x86_64 -> emacs-mercurial-2.6.2-11.el7.x86_64.rpm
$ yumdownloader --source emacs-mercurial.x86_64 -> mercurial-2.6.2-11.el7.src.rpm

Выдаст ссылку на Source Package не скачивая его
$ yumdownloader --source --urls emacs-gettext


--- specs
Файлы spec в CentOS используются для упаковки программного обеспечения. Они содержат необходимую информацию
и инструкции для сборки и установки пакета программного обеспечения. В этих файлах указываются исходные файлы,
зависимости, конфигурации сборки, места установки и другие детали. При создании пакета в CentOS файл spec
является ключевым компонентом для создания распространяемого пакета, который можно легко установить
на других системах.

В файле spec указываются различные директивы, в том числе инструкции для создания скриптов,
таких как postinstall (POSTIN) и preinstall (PREIN). Эти скрипты выполняются при установке пакета,
до или после установки файлов из пакета. Таким образом, при помощи spec файлов в CentOS генерируются скрипты,
которые позволяют выполнять различные действия в процессе установки или удаления пакетов.

ALL POSTIN PREIN


--- noarch / x86_64 / i686
x86_64 пакеты относятся к 64-битным процессорам.
i686 пакеты относятся к 32-битным процессорам.
noarch такие пакеты подходят для всех архитектур.


--- mock vs koji
Mock и Koji - это два разных инструмента для сборки пакетов в экосистеме CentOS и других дистрибутивов Linux.

Mock - это инструмент командной строки, который используется для создания чистой среды сборки и сборки пакетов
в изолированной среде. Он позволяет разработчикам создавать и тестировать пакеты в чистой и безопасной среде,
что полезно для обеспечения совместимости и избегания конфликтов зависимостей.

Koji - это система сборки пакетов, которая предоставляет инструменты для создания пакетов и управления
сборочными задачами, включая управление репозиториями и версиями пакетов. Koji используется для масштабирования
сборки пакетов и управления процессом сборки в распределенной среде.

Таким образом, хотя оба инструмента используются для сборки пакетов, они предоставляют различные функциональные
возможности и используются в разных контекстах разработки и сопровождения.


--- toolset
Toolset в CentOS - это набор инструментов и программного обеспечения, который предоставляет дополнительные функции
и возможности для работы с операционной системой. Например, toolset может включать в себя компиляторы, отладчики,
библиотеки и другие инструменты для разработки приложений, а также утилиты для управления и настройки системы.
Использование toolset позволяет расширить возможности операционной системы и повысить производительность
и эффективность работы с ней.


--- createrepo
$ yum install createrepo
$ mkdir repo; cd repo
$ yumdownloader <package1> <package2> ...
$ createrepo /home/<user>/repo
Создаст repodata/ в котором будут храниться метаданные, информация о пакетах.

Затем можно настроить веб-сервер для внешнего использования данного репозитория.
Клиенты смогут подключать и делать от туда $ yum update

mock может использовать данный репозиторий при сборке, запись в cfg файл:
[override]
name=override i386 - base
baseurl=http://192.168.5.139/for-emock/
enabled=1
gpgcheck=0
cost=2000
