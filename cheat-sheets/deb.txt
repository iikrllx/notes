Темы:
* Репозиторий
* Подпись
* Получение исходного пакета
* Описание исходного пакета
* Структура deb пакета
* Зависимости
* Виртуальные пакеты
* Метапакеты
* Где собирать исходники
* Создание локального репозитория
* Создание локального репозитория с помощью reprepro
* Структура репозитория
* Почему APT задает вопросы
* held packages
* fakeroot
* Создание бинарного пакета
* Директория DEBIAN/ и ручная сборка
* pbuilder и сборка пакета
* Этапы dpkg-buildpackage
* dpkg статус (rc / ii)
* Работа с заплатками
* DEB_BUILD_OPTIONS
* debug packages
* dpkg-reconfigure
* Разные версии пакета
* dist-upgrade с исключением
* Версионность
* eatmydata
* Репозитории и зеркала
* DEBIAN_FRONTEND
* Игнорировать рекомендуемые зависимости


--- Репозиторий
Репозиторий - это место, где хранятся и поддерживаются какие-то данные. Если рассматривать
конкретно к Debian, то репозиторий - это файловый сервер, который хранит у себя пакеты для установки
на операционную систему. Это могут быть как пакеты программ, так и обновления для сервера в виде
новых ядер, системных утилит и т.д. Существует репозитории не только для ОС, но и для программ, там
могут хранится скомпилированные и готовые к установке пакеты, так и исходные коды ПО. Помимо
официальных репозиториев, есть сторонние, которые поддерживают производители программ либо
энтузиасты. Нужно внимательно относится к сторонним репозиториям, не добавлять их бездумно (там
может быть любое ПО).

Репозиторий в sources.list имеет структуру:

deb http://site.example.com/debian distribution component1 component2 component3
deb-src http://site.example.com/debian distribution component1 component2 component3

apt знает как обращаться с http, ftp, file (локальные файлы, напр., каталог, содержащий
смонтированную ФС ISO9660), может быть еще и ssh

* deb
  бинарные пакеты (deb)

* deb-src
  пакеты с исходным кодом (deb-src)

* http://site.example.com/debian
  url репозитория

* distribution
  псевдоним релиза, ключевое слово, либо класс релиза (stable, old и т.д)

* component
  main, contrib или non-free набор пакетов, находятся в pool/

Классы релиза, типы репозиториев Debian:
* stable                # используется на производстве
* oldstable             # старый поддерживаемый stable
* testing               # только для тестовых целей, переходит в stable
* unstable (sid)        # самое свежее, но непротестированное ПО
* experimental          # пакеты и утилиты, которые только разрабатываются (alpha)
* stretch               # 9 debian
* buster                # 10 debian
* bullseye              # 11 debian
* bookworm              # 12 debian

Есть так называемые Security updates, отдельные репозитории в которые попадают только обновления
безопасности и ничего другого. Обновление сюда попадают максимально быстро после выпуска
исправлений.

* main
  эти пакеты считаются частью дистрибутива Debian, им не требуются какие-то
  дополнительные пакеты / зависимости из contrib или non-free.

* contrib
  этим пакетам (зависимостям) могут потребоваться доп.ПО, которое может
  быть в других источниках, например non-free, то есть может потребоваться несвободное ПО.

* non-free
  содержит все остальное ПО (несвободное - несоответствует принципа СПО).

* non-free-firmware
  несвободные прошивки, которые доступны по умолчанию.
  хранятся драйверы и другие компоненты, которые содержат закрытый исходный код или несвободные лицензии.

Можно создать локальный репозиторий, он будет использоваться только на данном ПК, собирать пакеты,
класть в этот локальный репозиторий с другими, и прописывать их в sources.list и делать установку от
туда.


--- Подпись
Для обеспечения безопасности пользователей репозитории должны подписываться ключами шифрования.
Чтобы гарантировать, что установка пакетов ПО производится из надежного источника. Владельцы
репозиториев, подписав его своим закрытым ключом, выкладывают в общий доступ соответствующий
открытый ключ для этого репозитория. Открытый ключ необходим для добавления удалённого подписанного
репозитория, это контролируется средствами СУП (apt). Если ставить пакеты из НЕ подписанного
репозитория, там может быть абсолютно любое ПО, в том числе злоумышленников и хакеров. При импорте
ключа, будет запрос к серверу ключей, на котором хранится закрытая часть ключа. Нужно поставить
'dirmngr' перед запросом ключей. Иногда может появится ошибка, что ключ устарел (его поменяли) и
нужно добавить новый, а иногда просто NO_PUBKEY (означает, что нужно просто добавить ключ).

Запрос:
$ gpg --keyserver pgp.mit.edu --recv ${KEY}

Добавление в систему:
$ gpg --export ${KEY} | sudo apt-key add -

Коротко:
$ apt-key adv --keyserver pgp.mit.edu --recv-keys ${KEY}


--- Получение исходного пакета
В /etc/apt/sources.list должен быть тип архива deb-src

$ apt-get source <pack>     # скачать исходники
$ apt-get build-dep <pack>  # установка Build-Depends зависимостей
$ apt-cache showsrc <pack>  # так можно посмотреть Build-Depends

Например, изменили что-то в исходниках, затем нужно:
$ dch                                  # изменения в changelog
$ dpkg-source --commit                 # создание нового патча
$ dpkg-source --before-build .         # применить патчи
$ dpkg-buildpackage -rfakeroot -b -uc  # сборка пакета

Но нужно быть аккуратным, при сборке могут непроходить некоторые тесты, поэтому после изменений
исходников, нужно подправить и другие компоненты (тесты) Или можно просто добавить DEB_BUILD_OPTIONS.


--- Описание исходного пакета
pack-version.dsc            # source package
                            # описание пакета + суммы исходных архивов,
                            # данный файл подписан (подлинный)

pack-version.debian.tar.gz  # source package
                            # содержимое debian/ директории

pack-version.orig.tar.gz    # original source package
                            # содержимое исходных текстов, src, tests, libs и другие

pack-version*.changes       # содержит информацию о версии пакета, изменениях, которые были внесены,
                            # и другие метаданные о пакете.

* Управляющие файлы пакета: control файл, скрипты и файлы подсистемы debian
debian/rules                # Makefile осуществляет сборку пакета
debian/control              # текстовый файл (описание)
debian/changelog            # изменения в проекте
debian/format               # формат пакета, современный формат 3.0
                            # 3.0 (native) - для родных Debian пакетов
                            # 3.0 (quilt) - для остальных пакетов
debian/watch                # оригинальный адрес с исходниками, нужен для uscan

Файл debian/watch используется для автоматического обновления и загрузки новых версий пакетов из
исходных архивов. Он содержит информацию о местоположении, формате и правилах для поиска обновлений
пакетов. Формат файла debian/watch может различаться в зависимости от используемого инструмента для
обновления пакетов. В данном файле можно увидеть что-то подобное: version=4 (это версия формата uscan).

uscan - это инструмент, который используется для автоматического поиска и загрузки новых версий
пакетов на основе информации из файла debian/watch.

$ uscan --no-download
$ uscan --verbose
$ uscan

После выполнения данной команды, скачается архив с актуальной версией пакета (только архив с
исходниками), можно его распаковать, скопировать debian/ директорию из прошлого архива, и дополнить
новыми данными:
$ dch -v <new-version> "New upstream release."
$ dpkg-buildpackage -b -uc

После сборки пакета появятся файлы:
<package>.dsc
<package>_source.changes
и т.д ...

Каждый пакет и каждые исходники, хранят в себе файл control
В самом .deb пакете этот файл хранится в архиве control.tar.gz
В исходниках, хранится в debian/control
Базы apt и dpkg хранятся в этом же формате.

В директории debian/ могут быть и скрипты (конфигурации), скриптами не стоит злоупотреблять
и они должны отрабатывать так, чтобы целостность системы не нарушалась при повтороном запуске.

debian/<pack>.preinst       # выполняется перед установкой пакета (install)
debian/<pack>.postinst      # выполняется сразу после установки пакета (install)
debian/<pack>.prerm         # выполняется перед удалением пакета (rm) (зачистка)
debian/<pack>.postrm        # выполняется после удаления пакета (rm)

Дополнительные файлы пакета (появляются после сборки):
debian/<pack>/DEBIAN/conffiles  # список конфигурационных файлов пакета, абсолютные пути
debian/<pack>/DEBIAN/md5sums    # список MD5 сумм файлов пакета по одному файлу на строчку
debian/<pack>/DEBIAN/shlibs     # список разделяемых библиотек (shared)

Важно понимать, что директория DEBIAN имеет как бы сторону ФС и там можно увидеть usr/bin и
подобное.


--- Структура deb пакета
Скачанные из сети файлы помещаются на диск в каталог /var/cache/apt/archives
Если удалить из /var/cache/apt/archives/<pack> и заново установить пакет,
он будет скачиваться из сети по новой, если же наоборот, будет обращение к кешу,
чтобы сэкономить ресурсы.

Файлы документации, changelog и подобного есть в /usr/share/doc/<pack>

Двоичный пакет deb - это обычный ar архив, состоит он из:
$ ar t <pack.deb>

debian-binary   # текстовый файл, содержит версию deb-пакета, 3.0 современный формат
control.tar.gz  # архив с управляющей информацией (control, conffiles, md5sums) и скрипты
                # это  называется мета-информация
data.tar.gz     # архив, содержащий дерево устанавливаемых файлов пакета
                # (исходники, документация, файлы, либы ..)
                # если этот архив разархивировать в корень системы, программа как бы установится
                # все файлы программы будут по своим местам

Мета-информация - это не только файлы пакета для установки, это так же описание отношений с другими
пакетами в системе Debian. Информация о другой информации.

Пакеты Debian — это не единственный формат пакетов, используемый в мире свободного ПО.
Основным конкурентом является формат RPM из дистрибутива Red Hat Linux и его многочисленных производных.
Red Hat — очень популярный коммерческий дистрибутив (конкурент Debian). Не стоит использовать rpm пакеты
в Debian, если только использовать вместе с alien.


--- Зависимости
Бинарные пакеты могут для свой корректной работы требовать наличия других, отсутствия других,
а также рекомендовать к установке другие пакеты, вместе с которыми данные будут обеспечивать большую
функциональность. Все эти поля хранит файл debian/control.

Зависимости бинарного пакета:
Depends      # Пакет не будет установлен до тех пор, пока перечисленные пакеты не будут установлены.

Pre-Depends  # Эти зависимости дополняют 'Depends' зависимости.

Recommends   # Указывает на пакеты, которые рекомендуется устанавливать вместе с данным пакетом, но
             # это не обязательно.

Suggests     # Указывает на пакеты, которые могут быть полезны при использовании данного пакета, но
             # не обязательны для его работы.

Conflicts    # Указывает пакеты, вместе с которыми данный пакет работать НЕ может.

Replaces     # Указывает пакеты, файлы которых модифицируются этим пакетом.
             # Требуется в случае создания патча, изменяющего что-либо.

Provides     # Указывает на виртуальные пакеты, которые предоставляются данным пакетом и могут
             # использоваться другими пакетами как зависимости.
             # Пакеты Apache / Nginx предоставляют возможность демона httpd (виртуальный пакет).
             # А у mc есть Provides: mcedit (виртуальный пакет).

Зависимости сборки:
Build-Depends, Build-Conflicts
Эти зависимости должны быть удовлетворены в тот момент, когда debian/rules данного пакета
вызывается с параметрами: build, binary, binary-arch, build-arch, build-indep и binary-indep


--- Виртуальные пакеты
Это просто алиасы для основного пакета, например mc и mcedit. mc - это основной пакет где содержится
вся функциональность (mc и mcedit), а mcedit это всего лишь алиас для mc. Это сделано для удобства
пользователей, которые могут устанавливать mcedit вместо mc, если им нужен только текстовый
редактор, а не весь файловый менеджер. Таким образом, пользователи могут установить только то, что
им нужно, не устанавливая все компоненты пакета mc.


--- Метапакеты
Существуют пустые пакеты, в которых описаны только зависимости и метаданные (документация и т.д).
Они обеспечивают установку группы взаимосвязанных программ. В описании можно увидеть.
Section: metapackages (но это необязательно). Например, пакет 'build-essential' является метапакетом.
В таких пакетах нет исходников и подобного, а есть только debian/ директория с описанием.
Такие пакеты существуют лишь ради эффектов, которые их метаданные оказывают на стек работы с пакетами.

Пакет build-essential в Debian является метапакетом. Он предоставляет необходимые инструменты для
сборки пакетов в Debian, включая компиляторы, библиотеки и другие инструменты, но сам по себе не
содержит какого-либо программного кода. Он лишь указывает на другие пакеты, которые необходимы для
сборки программ в Debian. Вся суть этого пакета в Depends: и метаданных.

$ mkdir pack-1.0 && cd pack-1.0
$ equivs-control control    # появится control
$ vim control               # изменить под метапакет
$ equivs-build control      # соберет метапакет

еще примеры:
$ equivs-control debian     # появится debian/
$ equivs-build debian       # соберет метапакет


--- Где собирать исходники
Чтобы собрать пакет правильно, его необходимо собирать в минимальной системе, где стоят только
build-essential и зависимости этого пакета. Тогда не будет никаких накладок из-за того, что в
системе стоят некоторые пакеты вообще неизвестно откуда и непонятно каких версий, для этого лучше
использовать chroot (debootstrap / pbuilder)


--- Создание локального репозитория
$ apt-get install dpkg-dev

Нужно создать директорию и положить туда *.deb файлы
$ cd /usr/local/debs/ && dpkg-scanpackages -m . | gzip > Packages.gz

Файл Packages.gz содержит информацию о пакетах
-m означает, что будут положены все найденные .deb файлы в вывод

В sources.list нужно:
deb [trusted=yes] file:///usr/local debs/

Можно тоже самое сделать и для исходников, только архив будет называться Sources.gz
И нужно использовать утилиту $ dpkg-scansources
Нужно создать директорию и положить туда .orig.tar.gz, .dsc, .debian.tar.gz
$ dpkg-scansources . | gzip > Sources.gz

В sources.list нужно:
deb-src [trusted=yes] file:///usr/local debs/


--- Создание локального репозитория с помощью reprepro
$ apt-get install reprepro
$ mkdir -p repo/conf
$ touch repo/conf/distributions

Origin: Debian               # название репозитория
Suite: unstable              # ветка (codename alias)
Codename: dick               # кодовое слово (например buster, bullseye)
Version: 1.0                 # версия
Architectures: amd64 source  # для amd64 + исходных кодов
Components: main             # компонент (main, contrib, non-free)
Description: my local repo   # описание
SignWith: yes                # подпись

reprepro -b <base_dir>
$ export REPREPRO_BASE_DIR=repo/

$ cd <base_dir> && reprepro export
$ reprepro -C <component> includedeb <codename> *.deb
$ reprepro repo/ createsymlinks
$ reprepro repo/ remove <codename> <name_of_deb>
$ reprepro repo/ removesrc <codename> <name_of_src>

sources.list
deb [trusted=yes] file:///home/builder/repo/ <codename> <component>

Если нужно сделать репозиторий, который можно будет подключаться с внешнего источника,
тогда нужно развернуть на каком-нибудь сервере - Apache / Nginx, создать репозиторий, подписать.


--- Структура репозитория
Содержит суммы, метаданные пакетов
repo/dists
repo/dists/main
repo/dists/main/binary-<arch>/
repo/dists/main/binary-<arch>/Packages     # метаданные пакетов из компонента 'main'
repo/dists/main/binary-<arch>/Packages.gz  # архив gzip файла выше
repo/dists/main/binary-<arch>/Release      # описание релиза
repo/dists/main/binary-<arch>/Release.gpg  # подпись
repo/dists/contrib
repo/dists/non-free
repo/dists/Release                         # содержит суммы Packages / Packages.gz / Release и других
                                           # файлов метаданных

Содержит пакеты различных компонентов a/ b/ c/ ...
repo/pool
repo/pool/main
repo/pool/contrib
repo/pool/non-free

Содержит управляемые пакеты и контрольные суммы в файлах баз данных
repo/db


--- Почему APT задает вопросы
$ apt-get install nautilus
Данный пакет зависит от совместно-используемых библиотек, поэтому APT скачает их из архива и задает
вопрос, нужно ли их скачать? можно? Если бы мы указали имена этих библиотек apt-get он бы не стал
спрашивать разрешения на установку.


--- held packages
Unable to correct problems, you have held broken packages. Пакеты нуждаются в зависимостях, которые
требуют предустановки. Система пытается их установить, но не может (например этих зависимостей нет
в источниках sources.list)

Решение:
* Обновить кеш
  $ apt-get update
  и попробовать установить пакет

* Найти проблемный пакет
  $ apt search <p>

* Поменять источник sources.list на другой


--- fakeroot
Процесс создания пакета является простым сбором в архив набора существующих файлов. Собирать пакет
от имени root не нужно! (это риск). Можно использовать утилиту fakeroot и передать ей программу,
которая будет обманута (мол она запущена от имени root). Это настолько удобно, что dpkg-buildpackage
имеет встроенную функциональность fakeroot. Процесс будет выполняться от обычного пользователя, а не root.


--- Создание бинарного пакета
Есть некая программа в исходных кодах (tarball - архив), необходимо создать для него набор,
пригодный для сборки пакета deb. Этот процесс называется дебианизацией программы. Для того чтобы
дебианизировать программу, нужно в дереве ее исходников создать каталог debian/ и положить туда
файлы.

$ mkdir -p <package>-<version>/src
$ cd <package>-<version>/src
$ touch hello.c; cd-          # прописать вывод hello
$ dh_make --native            # создаст родной debian/
                              # редактируем debian/ файлы, удаляем ненужные
$ dpkg-source -b .            # создать архивы (исходники) и мета

# если случайно удалили какие то файлы из debian/
$ dh_make --addmissing

В корне пакета, создать Makefile:
src/hello: src/hello.c
	gcc -g3 -O0 -o src/hello src/hello.c

install: src/hello
	install -D src/hello $(DESTDIR)/usr/bin/hello

DESTDIR имеет полный путь к папке:
/home/builder/binout-1.0/debian/binout
и нужный бинарный файл, будет положен в usr/bin/

Структура:
<package>-<version>/
<package>-<version>/Makefile
<package>-<version>/debian/
<package>-<version>/src/
<package>-<version>/src/hello.c

$ debuild -uc -us

Получаем на выходе:
helloworld_0.0.1_amd64.build    # build log file
helloworld_0.0.1_amd64.changes  # changelog and checksums
helloworld_0.0.1_amd64.deb      # binary package
helloworld_0.0.1.dsc            # source package (debian source control)
helloworld_0.0.1.tar.gz         # original source directory

Описание dh_make:
Создает пакет, который предназначен для использования на одной конкретной архитектуре и не должен
быть переносимым на другие архитектуры: $ dh_make --native

Создает пакет, который является одиночным бинарным пакетом, который будет установлен на одном
компьютере: $ dh_make --single

Создает пакет, который является библиотекой (shared library), которая может быть использована
другими программами: $ dh_make --library

Создает архитектурно-независимый пакет, который может быть использован на различных архитектурах и
не зависит от конкретной архитектуры: $ dh_make --indep

dephelper представляет собой набор сценариев, эти сценарии вызываются из debian/rules
Все команды, входящие в него, начинаются с префикса dh_
dh_make создает файлы, а dephelper использует эти сформированные файлы.

Создаст подкаталог debian со множеством файлов.
Обязательные файлы: rules, control, changelog, copyright
Файлы .ex служат примерами, их можно удалить или изменить.

Эти файлы необходимо изменить под наш пакет
rules это Makefile, набор правил, используемых для конфигурирования, сборки и установки:
target: source1 source2 ...
        command1
        command2

Если один из файлов source* новее, чем файл target, то цель должна быть создана
с помощью command1 command2

Большинство программ, учавствующих в сопровождении пакета, будет искать имя и адрес
электронной почты в переменных окружения DEBFULLNAME / DEBEMAIL / EMAIL
В ~/.bashrc можно прописать:
$ export EMAIL="hertzog@debian.org"
$ export DEBFULLNAME="Raphael Hertzog"


--- Директория DEBIAN/ и ручная сборка
Содержимое директории DEBIAN не копируется на диск при установке пакета. При установке пакета все
файлы (кроме папки DEBIAN) распаковываются в корень, например в /bin или /usr/bin

$ mkdir -p name-of-package/DEBIAN
$ vim name-of-package/DEBIAN/control

Обязательные атрибуты:
Package: name-of-package
Version: 1.0
Section: misc           # Задача, для которой используется пакет
Architecture: all       # Архитектура процессора, для которой предназначен пакет
Maintainer: <name>
Description: <desc>

Необязательные атрибуты:
Depends: debootstrap    # Список пакетов, которые нужно предустановить
Conflicts: vim          # Список пакетов с которыми нельзя ставить данный пакет
Recommends: bla, bla    # Список пакетов, рекомендуемых к установке (необязательно)
Priority: extra         # Приоритет пакета, например required удалить нельзя
Build-Depends: cmake    # Список пакетов, требуемых для компиляции исходников
                        # тоже что и Depends, но логически отделено

$ mkdir -p name-of-package/usr/local/bin
$ cp /path/to/binary name-of-package/usr/local/bin/

Затем нужно рекурсивно выставить всем файлам в корне пакета
пользователя и группу root:root
$ sudo chown -R root:root .
но можно этого и не делать:
$ fakeroot dpkg-deb --build <name-of-package>

Затем проверяем прочность / целостность пакета
$ lintian package.deb


--- pbuilder и сборка пакета
$ apt-get install pbuilder
$ pbuilder create --mirror http://deb.debian.org/debian --distribution sid
$ pbuilder --login --save-after-login --basetgz /var/cache/pbuilder/base.tgz
$ pbuilder --login

Перед этой командой нужно убедиться, что есть *.orig.tar.gz / *.debian.tar.xz
$ pbuilder build <pack>.dsc

var/cache/pbuilder/build/<pid>/  # нахождение chroot
var/cache/pbuilder/result        # результат сборки


--- Этапы dpkg-buildpackage
1. dpkg-source --before-build <path>
Подготавливает среду сборки, устанавливая различные переменные окружения
Применяет патчи.

2. зависимости-конфликты удовлетворены ?

3. fakeroot debian/rules clean
Зачищает дерево проекта, важно отметить, что это не только rm команды,
cp <path> debian/changelog подготовка окружения

4. dpkg-source -b <path>
Создает source package, ему необходим <pack>.orig.tar.xz
Создаст <pack>.dsc / <pack>.debian.tar.gz

Можно проигнорировать этот этап вызовом: dpkg-buildpackage -b

5. fakeroot debian/rules build или fakeroot debian/rules binary
Сборка программы (создание ELF файлов, Makefile, configure)
или сборка двоичных пакетов (deb)

6. Создает .buildinfo файл

7. Создает .changes файл

8. fakeroot debian/rules clean

9. dpkg-source --after-build

10. Проверяет .changes

11. Подпись


--- dpkg статус (rc / ii)
r - пакет помечен для удаления
c - только конфигурации пакета присутствуют на системе (удален не полностью)
i - установлен


--- Работа с заплатками
quilt работает с мета-данными из директории .pc создается эта директория после dpkg-source -x .dsc

Заплатка - кусок ткани, или кожи, нашиваемый на прорванное место одежды, или обуви, или на
какое-либо изделие для починки.

Есть исходные файлы:
dovecot_2.3.4.1-5+deb10u6.debian.tar.xz
dovecot_2.3.4.1-5+deb10u6.dsc
dovecot_2.3.4.1.orig.tar.gz

Чтобы не использовать git init + git status, можно заменить quilt diff + quilt series
и нижеописанные команды.

$ dpkg-source -x dovecot_2.3.4.1-5+deb10u6.dsc  # выгрузит все архивы и применит все заплатки
$ dch                                           # добавит в конце версии цифру (debian/changelog)
$ dch -e                                        # изменить текущий debian/changelog без поднятия версии
$ quilt refresh                                 # добавляет Index к патчу (после всех редактирований)
                                                # допустим откатились на необходимый патч и сделали правки
                                                # затем делаем эту команду и она добавляет эти правки в тот же патч
$ quilt series                                  # чтение debian/patches/series
$ quilt diff                                    # изменение патча
$ quilt files                                   # показывает файл в котором изменение (патча)
$ quilt pop                                     # убирает последний патч (из примененных)
$ quilt push                                    # добавляет последний патч
$ quilt pop -a                                  # удаляет все патчи (из примененных)
$ quilt push -a                                 # добавляет все патчи
$ quilt delete <patch>                          # удаление патча
$ quilt delete -r <patch>                       # удаление патча вместе с unlink
$ quilt edit <file>                             # сделать изменения (они добавятся к последнему патчу)
                                                # после edit необходимо сделать quilt refresh
$ quilt new <patch>                             # поставить новый патч на top

Почему после dpkg-buildpackage нет нового dovecot_2.3.4.1.orig.tar.gz ?
из новых архивов будет только dovecot_2.3.4.1-5+deb10u6.1.debian.tar.xz
в котором и будет наш новый патч (debian/) и эти патчи применяются к текущим исходникам,
а сами исходники не меняются.

$ dpkg-source --commit                          # local changed record
$ dpkg-source -itags --commit                   # ignore tags changes + commit

После данной команды нужно выполнить (когда добавили или удалили патч)
$ quilt refresh

Если необходимо отменить локальные изменения, можно сделать
$ dpkg-source --commit
$ patch -p1 -R < new.patch
$ quilt delete new

Если .pc больше нет, можно добавить: export QUILT_PATCHES=debian/patches
$ quilt push -a


--- DEB_BUILD_OPTIONS
Эта переменная окружения хранит различные флаги и debian/rules создает пакет в соответствии
с этой переменной.

nocheck  # не запускать тесты
noopt    # минимальная оптимизация -O0
nostrip  # отладочные символы НЕ будут удалены
debug    # будет включена отладочная информация
noddebs  # отказ от dbgsym пакетов

Можно экспортировать:
$ export DEB_BUILD_OPTIONS='nocheck noopt nostrip debug'


--- debug packages
Пакеты с отладочной информацией собираются с:
DEB_BUILD_OPTIONS='nocheck noopt nostrip debug'

Если установить пакет и запустить gdb, он скажет 'file.c: No such file or directory'
Необходимо так же перенести исходные коды на отладочную гостевую:
$ scp -r path/to/dir .

Пакет может иметь файлы конфигурации, например как в dovecot
/etc/dovecot/conf.d/10-logging.conf
Можно включить отладочную информацию и т.д.


--- dpkg-reconfigure
Для настройки пакета можно использовать:
$ dpkg-reconfigure console-setup
Конфигурация консольного шрифта

Для просмотра конфигурации:
$ debconf-show console-setup


--- Разные версии пакета
Прописываем:
deb-src http://deb.debian.org/debian bullseye main contrib non-free
deb-src http://deb.debian.org/debian buster main contrib non-free
deb-src http://deb.debian.org/debian stretch main contrib non-free

Узнаем какие версии пакета доступны
$ apt-cache madison glibc-source

Получить версию 2.28-10
$ apt-get source glibc-source=2.28-10+deb10u1


--- dist-upgrade с исключением
$ apt-mark hold <package>
$ apt-get dist-upgrade
$ apt-mark unhold <package>


--- Версионность
1.9.0.1

1 - Major revision
Мажорная версия — та версия, в которой можно полностью менять
поведение, API, удалять старый код и т.д.

9 - Minor revision
Предназначена для добавления нового функционала или внесения изменений,
которые соблюдают обратную совместимость.

0 - Bug fix
Исправление багов, CVE fixed и т.д.

1 - Build number (номер сборки - CI) Идет после символа '+'

------------------------------------------------------------------
Разбор: 1:9.18.19-1~deb12u1 -> [epoch:]upstream_version[-debian_revision]

* epoch
1: (epoch) В changelog можно заметить такие случаи появления epoch. Например, если был bison
(1.25-1) experimental; urgency=low, затем стал bison (1:1.25-1) unstable; urgency=low. Еще пример,
был bison (1:2.6.2.dfsg-1), затем понизили версию до 2.5.dfsg-3, соотвественно полностью стал:
2:2.5.dfsg-3, epoch изменился с 1 на 2. Если были сделаны изменения, которые несовместимы с
предыдущими версиями, надо менять epoch.

* upstream_version
9.18.19 - это major / minor / bug fix
Эта версия берется от original source package (*.orig.tar.xz)

* -debian_revision
-1
Версия Debian пакета
Относится конкретно к дебианизации -1 это номер debian ревизии
Эта версия берется от source package (*.dsc и *.debian.tar.xz)
После изменений в debian/ мета-информации, сборочных скриптов и т.д

* дополнительная метка
~deb12u1
Версия Debian пакета в системе Debian 12.1
Какие-то исправления для Debian безопасности.
------------------------------------------------------------------

------------------------------------------------------------------
Разбор: 2:3.8.2+dfsg-1+b1
2                   epoch
3.8.2               upstream_version (major / minor / bugs)
+dfsg               дополнительная метка (не содержит несвободное ПО)
-1                  -debian_revision (номер debian ревизии)
+b1                 номер сборки (изменения внесенные в пакет при его компиляции или сборке)
------------------------------------------------------------------

Бывают еще стадии разработки в версии.
Есть еще pre-alpha, когда прям сырой код, ведется разработка.

* alpha
начало тестирования программы, выпуск для ознакомления

* beta
стадия активного бета-тестирования и отладки программы, обычно такие
программы имеют кучу ошибок, такой продукт так же проверяют и тестировщики и разработчики

* rc
программы этой стадии прошли всё тестирование, и почти готовы стать стабильными,
но могут иметься некоторые ошибки, которые не были найдены при тестировании

* stable
финальная стадия


--- eatmydata
В мейнтейнерской среде часто используется инструмент eatmydata для ускорения установки пакетов и
выполнения операций. Этот инструмент позволяет временно отключить синхронизацию данных на диске, что
может значительно ускорить выполнение операций ввода-вывода. Однако, следует помнить, что
использование eatmydata может повлечь за собой потерю данных в случае аварийного отключения
компьютера или других проблем. Поэтому его использование следует рассматривать с осторожностью и
только в тех случаях, когда ускорение работы действительно необходимо.

$ eatmydata apt-get install <a lot of packages>


--- Репозитории и зеркала
Репозиторий - это сервер или хранилище, где хранятся пакеты программного обеспечения для
операционной системы. Зеркало (mirror) - это копия репозитория, распределенная по различным
серверам или местоположениям для обеспечения быстрого доступа и загрузки пакетов пользователями.
Зеркала позволяют распределять нагрузку, обеспечивать отказоустойчивость и улучшить скорость
загрузки пакетов.


--- DEBIAN_FRONTEND
Установка пакетов без интерактивных режимов (вопросов, которые могут тормозить процесс установки).
Вместо этого будут установлены значения по-умолчанию.
$ DEBIAN_FRONTEND=noninteractive apt-get -y install $pack


--- Игнорировать рекомендуемые зависимости
Существуют пакеты, которые ставят рекомендуемые пакеты, тем самым загрязняют систему. Например,
пакет neofetch (который вместе с ним устанавливает w3m, w3m-img и подобные), хотя без этих пакетов
он так же отлично работает. Можно использовать опцию:
$ sudo apt-get install neofetch --no-install-recommends

А можно создать конфигурационный файл /etc/apt/apt.conf.d/99_norecommends и прописать:
APT::Install-Recommends "false";
APT::AutoRemove::RecommendsImportant "false";
APT::AutoRemove::SuggestsImportant "false";
